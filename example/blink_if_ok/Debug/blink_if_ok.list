
blink_if_ok.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003720  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  080038a8  080038a8  000048a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca8  08003ca8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003ca8  08003ca8  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003ca8  08003ca8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca8  08003ca8  00004ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cac  08003cac  00004cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003cb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000043ac  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200043b8  200043b8  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cae3  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4e  00000000  00000000  00011b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  00013970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000897  00000000  00000000  000144a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d585  00000000  00000000  00014d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efb1  00000000  00000000  000322c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aed83  00000000  00000000  00041275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000009c  00000000  00000000  000efff8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003018  00000000  00000000  000f0094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000f30ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003890 	.word	0x08003890

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003890 	.word	0x08003890

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	f5ad 4d80 	sub.w	sp, sp, #16384	@ 0x4000
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fb73 	bl	80008bc <HAL_Init>

  /* USER CODE BEGIN Init */
  Complesso x[1024];
  Complesso X[1024];

  for (int i=0; i<1024;i++){
 80001d6:	2300      	movs	r3, #0
 80001d8:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 80001dc:	f102 0204 	add.w	r2, r2, #4
 80001e0:	6013      	str	r3, [r2, #0]
 80001e2:	e03b      	b.n	800025c <main+0x94>
	  x[i].re = i;
 80001e4:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80001e8:	f103 0304 	add.w	r3, r3, #4
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	ee07 3a90 	vmov	s15, r3
 80001f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80001f6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80001fa:	f103 0308 	add.w	r3, r3, #8
 80001fe:	461a      	mov	r2, r3
 8000200:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8000204:	f103 0304 	add.w	r3, r3, #4
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	00db      	lsls	r3, r3, #3
 800020c:	4413      	add	r3, r2
 800020e:	3b04      	subs	r3, #4
 8000210:	edc3 7a00 	vstr	s15, [r3]
	  x[i].im = 1024-i;
 8000214:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8000218:	f103 0304 	add.w	r3, r3, #4
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000222:	ee07 3a90 	vmov	s15, r3
 8000226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800022a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800022e:	f103 0308 	add.w	r3, r3, #8
 8000232:	461a      	mov	r2, r3
 8000234:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8000238:	f103 0304 	add.w	r3, r3, #4
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	00db      	lsls	r3, r3, #3
 8000240:	4413      	add	r3, r2
 8000242:	edc3 7a00 	vstr	s15, [r3]
  for (int i=0; i<1024;i++){
 8000246:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 800024a:	f103 0304 	add.w	r3, r3, #4
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	f507 4280 	add.w	r2, r7, #16384	@ 0x4000
 8000256:	f102 0204 	add.w	r2, r2, #4
 800025a:	6013      	str	r3, [r2, #0]
 800025c:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 8000260:	f103 0304 	add.w	r3, r3, #4
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800026a:	dbbb      	blt.n	80001e4 <main+0x1c>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f830 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f930 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000274:	f000 f88e 	bl	8000394 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000278:	f000 f8cc 	bl	8000414 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800027c:	f000 f908 	bl	8000490 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  arm_fft(x, X, 1024);
 8000280:	f107 0108 	add.w	r1, r7, #8
 8000284:	3904      	subs	r1, #4
 8000286:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800028a:	f103 0308 	add.w	r3, r3, #8
 800028e:	3b04      	subs	r3, #4
 8000290:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000294:	4618      	mov	r0, r3
 8000296:	f002 fc6f 	bl	8002b78 <arm_fft>
  HAL_Delay(2000);
 800029a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800029e:	f000 fb73 	bl	8000988 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	2110      	movs	r1, #16
 80002a6:	4809      	ldr	r0, [pc, #36]	@ (80002cc <main+0x104>)
 80002a8:	f000 fdf2 	bl	8000e90 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80002ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b0:	f000 fb6a 	bl	8000988 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2110      	movs	r1, #16
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <main+0x104>)
 80002ba:	f000 fde9 	bl	8000e90 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80002be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002c2:	f000 fb61 	bl	8000988 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80002c6:	bf00      	nop
 80002c8:	e7eb      	b.n	80002a2 <main+0xda>
 80002ca:	bf00      	nop
 80002cc:	48000800 	.word	0x48000800

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b09e      	sub	sp, #120	@ 0x78
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002da:	2228      	movs	r2, #40	@ 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fd36 	bl	8002d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	223c      	movs	r2, #60	@ 0x3c
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fd28 	bl	8002d50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000300:	2303      	movs	r3, #3
 8000302:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000304:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000308:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	2301      	movs	r3, #1
 8000310:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	2310      	movs	r3, #16
 8000314:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	2302      	movs	r3, #2
 8000318:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800031e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000320:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000324:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800032a:	4618      	mov	r0, r3
 800032c:	f000 ffc2 	bl	80012b4 <HAL_RCC_OscConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000336:	f000 f961 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	230f      	movs	r3, #15
 800033c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033e:	2302      	movs	r3, #2
 8000340:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800034a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000350:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000354:	2101      	movs	r1, #1
 8000356:	4618      	mov	r0, r3
 8000358:	f001 ffba 	bl	80022d0 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000362:	f000 f94b 	bl	80005fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000366:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <SystemClock_Config+0xc0>)
 8000368:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800036a:	2300      	movs	r3, #0
 800036c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800036e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000372:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000374:	463b      	mov	r3, r7
 8000376:	4618      	mov	r0, r3
 8000378:	f002 f96c 	bl	8002654 <HAL_RCCEx_PeriphCLKConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000382:	f000 f93b 	bl	80005fc <Error_Handler>
  }
}
 8000386:	bf00      	nop
 8000388:	3778      	adds	r7, #120	@ 0x78
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	00020020 	.word	0x00020020

08000394 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000398:	4b1b      	ldr	r3, [pc, #108]	@ (8000408 <MX_I2C1_Init+0x74>)
 800039a:	4a1c      	ldr	r2, [pc, #112]	@ (800040c <MX_I2C1_Init+0x78>)
 800039c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800039e:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000410 <MX_I2C1_Init+0x7c>)
 80003a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003a4:	4b18      	ldr	r3, [pc, #96]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003aa:	4b17      	ldr	r3, [pc, #92]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b0:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003b6:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c2:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ce:	480e      	ldr	r0, [pc, #56]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003d0:	f000 fd76 	bl	8000ec0 <HAL_I2C_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003da:	f000 f90f 	bl	80005fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003de:	2100      	movs	r1, #0
 80003e0:	4809      	ldr	r0, [pc, #36]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003e2:	f000 fe08 	bl	8000ff6 <HAL_I2CEx_ConfigAnalogFilter>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003ec:	f000 f906 	bl	80005fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003f0:	2100      	movs	r1, #0
 80003f2:	4805      	ldr	r0, [pc, #20]	@ (8000408 <MX_I2C1_Init+0x74>)
 80003f4:	f000 fe4a 	bl	800108c <HAL_I2CEx_ConfigDigitalFilter>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003fe:	f000 f8fd 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000028 	.word	0x20000028
 800040c:	40005400 	.word	0x40005400
 8000410:	2000090e 	.word	0x2000090e

08000414 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000418:	4b1b      	ldr	r3, [pc, #108]	@ (8000488 <MX_SPI1_Init+0x74>)
 800041a:	4a1c      	ldr	r2, [pc, #112]	@ (800048c <MX_SPI1_Init+0x78>)
 800041c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041e:	4b1a      	ldr	r3, [pc, #104]	@ (8000488 <MX_SPI1_Init+0x74>)
 8000420:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000426:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <MX_SPI1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800042c:	4b16      	ldr	r3, [pc, #88]	@ (8000488 <MX_SPI1_Init+0x74>)
 800042e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000432:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000434:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <MX_SPI1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800043a:	4b13      	ldr	r3, [pc, #76]	@ (8000488 <MX_SPI1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000440:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <MX_SPI1_Init+0x74>)
 8000442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000446:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000448:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <MX_SPI1_Init+0x74>)
 800044a:	2208      	movs	r2, #8
 800044c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800044e:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <MX_SPI1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <MX_SPI1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045a:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <MX_SPI1_Init+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000460:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <MX_SPI1_Init+0x74>)
 8000462:	2207      	movs	r2, #7
 8000464:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000466:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <MX_SPI1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_SPI1_Init+0x74>)
 800046e:	2208      	movs	r2, #8
 8000470:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000472:	4805      	ldr	r0, [pc, #20]	@ (8000488 <MX_SPI1_Init+0x74>)
 8000474:	f002 fa9c 	bl	80029b0 <HAL_SPI_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800047e:	f000 f8bd 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	2000007c 	.word	0x2000007c
 800048c:	40013000 	.word	0x40013000

08000490 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000494:	4b0d      	ldr	r3, [pc, #52]	@ (80004cc <MX_USB_PCD_Init+0x3c>)
 8000496:	4a0e      	ldr	r2, [pc, #56]	@ (80004d0 <MX_USB_PCD_Init+0x40>)
 8000498:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800049a:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <MX_USB_PCD_Init+0x3c>)
 800049c:	2208      	movs	r2, #8
 800049e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004a0:	4b0a      	ldr	r3, [pc, #40]	@ (80004cc <MX_USB_PCD_Init+0x3c>)
 80004a2:	2202      	movs	r2, #2
 80004a4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004a6:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <MX_USB_PCD_Init+0x3c>)
 80004a8:	2202      	movs	r2, #2
 80004aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004ac:	4b07      	ldr	r3, [pc, #28]	@ (80004cc <MX_USB_PCD_Init+0x3c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004b2:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <MX_USB_PCD_Init+0x3c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004b8:	4804      	ldr	r0, [pc, #16]	@ (80004cc <MX_USB_PCD_Init+0x3c>)
 80004ba:	f000 fe33 	bl	8001124 <HAL_PCD_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80004c4:	f000 f89a 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	200000e0 	.word	0x200000e0
 80004d0:	40005c00 	.word	0x40005c00

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	@ 0x28
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ea:	4b41      	ldr	r3, [pc, #260]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a40      	ldr	r2, [pc, #256]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 80004f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b3e      	ldr	r3, [pc, #248]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	4b3b      	ldr	r3, [pc, #236]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a3a      	ldr	r2, [pc, #232]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 8000508:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b38      	ldr	r3, [pc, #224]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800051a:	4b35      	ldr	r3, [pc, #212]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a34      	ldr	r2, [pc, #208]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 8000520:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b2f      	ldr	r3, [pc, #188]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a2e      	ldr	r2, [pc, #184]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 8000538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a28      	ldr	r2, [pc, #160]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 8000550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_GPIO_Init+0x11c>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000562:	2200      	movs	r2, #0
 8000564:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000568:	4822      	ldr	r0, [pc, #136]	@ (80005f4 <MX_GPIO_Init+0x120>)
 800056a:	f000 fc91 	bl	8000e90 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	2110      	movs	r1, #16
 8000572:	4821      	ldr	r0, [pc, #132]	@ (80005f8 <MX_GPIO_Init+0x124>)
 8000574:	f000 fc8c 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000578:	2337      	movs	r3, #55	@ 0x37
 800057a:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800057c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4619      	mov	r1, r3
 800058c:	4819      	ldr	r0, [pc, #100]	@ (80005f4 <MX_GPIO_Init+0x120>)
 800058e:	f000 fb05 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000592:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000596:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	4812      	ldr	r0, [pc, #72]	@ (80005f4 <MX_GPIO_Init+0x120>)
 80005ac:	f000 faf6 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005b0:	2301      	movs	r3, #1
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c6:	f000 fae9 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ca:	2310      	movs	r3, #16
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <MX_GPIO_Init+0x124>)
 80005e2:	f000 fadb 	bl	8000b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005e6:	bf00      	nop
 80005e8:	3728      	adds	r7, #40	@ 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	48001000 	.word	0x48001000
 80005f8:	48000800 	.word	0x48000800

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <Error_Handler+0x8>

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <HAL_MspInit+0x44>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a0e      	ldr	r2, [pc, #56]	@ (800064c <HAL_MspInit+0x44>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <HAL_MspInit+0x44>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <HAL_MspInit+0x44>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a08      	ldr	r2, [pc, #32]	@ (800064c <HAL_MspInit+0x44>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <HAL_MspInit+0x44>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800063e:	2007      	movs	r0, #7
 8000640:	f000 fa78 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a17      	ldr	r2, [pc, #92]	@ (80006cc <HAL_I2C_MspInit+0x7c>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d127      	bne.n	80006c2 <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <HAL_I2C_MspInit+0x80>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a16      	ldr	r2, [pc, #88]	@ (80006d0 <HAL_I2C_MspInit+0x80>)
 8000678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <HAL_I2C_MspInit+0x80>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068e:	2312      	movs	r3, #18
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000692:	2301      	movs	r3, #1
 8000694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800069a:	2304      	movs	r3, #4
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <HAL_I2C_MspInit+0x84>)
 80006a6:	f000 fa79 	bl	8000b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <HAL_I2C_MspInit+0x80>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a08      	ldr	r2, [pc, #32]	@ (80006d0 <HAL_I2C_MspInit+0x80>)
 80006b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <HAL_I2C_MspInit+0x80>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	@ 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40005400 	.word	0x40005400
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000400 	.word	0x48000400

080006d8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a17      	ldr	r2, [pc, #92]	@ (8000754 <HAL_SPI_MspInit+0x7c>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d128      	bne.n	800074c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006fa:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <HAL_SPI_MspInit+0x80>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a16      	ldr	r2, [pc, #88]	@ (8000758 <HAL_SPI_MspInit+0x80>)
 8000700:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <HAL_SPI_MspInit+0x80>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <HAL_SPI_MspInit+0x80>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a10      	ldr	r2, [pc, #64]	@ (8000758 <HAL_SPI_MspInit+0x80>)
 8000718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <HAL_SPI_MspInit+0x80>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800072a:	23e0      	movs	r3, #224	@ 0xe0
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000736:	2303      	movs	r3, #3
 8000738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800073a:	2305      	movs	r3, #5
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000748:	f000 fa28 	bl	8000b9c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	@ 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40013000 	.word	0x40013000
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a18      	ldr	r2, [pc, #96]	@ (80007dc <HAL_PCD_MspInit+0x80>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d129      	bne.n	80007d2 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_PCD_MspInit+0x84>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <HAL_PCD_MspInit+0x84>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_PCD_MspInit+0x84>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000796:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80007a8:	230e      	movs	r3, #14
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b6:	f000 f9f1 	bl	8000b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <HAL_PCD_MspInit+0x84>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <HAL_PCD_MspInit+0x84>)
 80007c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_PCD_MspInit+0x84>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	@ 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40005c00 	.word	0x40005c00
 80007e0:	40021000 	.word	0x40021000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <MemManage_Handler+0x4>

080007fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <UsageFault_Handler+0x4>

0800080c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083a:	f000 f885 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <SystemInit+0x20>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800084e:	4a05      	ldr	r2, [pc, #20]	@ (8000864 <SystemInit+0x20>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800086c:	f7ff ffea 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	@ (80008a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <LoopForever+0xe>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	@ (80008b4 <LoopForever+0x16>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000896:	f002 fa63 	bl	8002d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800089a:	f7ff fc95 	bl	80001c8 <main>

0800089e <LoopForever>:

LoopForever:
    b LoopForever
 800089e:	e7fe      	b.n	800089e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008ac:	08003cb0 	.word	0x08003cb0
  ldr r2, =_sbss
 80008b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008b4:	200043b8 	.word	0x200043b8

080008b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_2_IRQHandler>
	...

080008bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <HAL_Init+0x28>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	@ (80008e4 <HAL_Init+0x28>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f931 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f808 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff fe96 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40022000 	.word	0x40022000

080008e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <HAL_InitTick+0x54>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_InitTick+0x58>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f93b 	bl	8000b82 <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e00e      	b.n	8000934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d80a      	bhi.n	8000932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f000 f911 	bl	8000b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4a06      	ldr	r2, [pc, #24]	@ (8000944 <HAL_InitTick+0x5c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000000 	.word	0x20000000
 8000940:	20000008 	.word	0x20000008
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_IncTick+0x20>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_IncTick+0x24>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a04      	ldr	r2, [pc, #16]	@ (800096c <HAL_IncTick+0x24>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000008 	.word	0x20000008
 800096c:	200003b4 	.word	0x200003b4

08000970 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;  
 8000974:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <HAL_GetTick+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200003b4 	.word	0x200003b4

08000988 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000990:	f7ff ffee 	bl	8000970 <HAL_GetTick>
 8000994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a0:	d005      	beq.n	80009ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <HAL_Delay+0x44>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009ae:	bf00      	nop
 80009b0:	f7ff ffde 	bl	8000970 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d8f7      	bhi.n	80009b0 <HAL_Delay+0x28>
  {
  }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	@ (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	@ 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f7ff ff8e 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff47 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff5c 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff8e 	bl	8000a88 <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5d 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffb0 	bl	8000af0 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000baa:	e154      	b.n	8000e56 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 8146 	beq.w	8000e50 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d005      	beq.n	8000bdc <HAL_GPIO_Init+0x40>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d130      	bne.n	8000c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c12:	2201      	movs	r2, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	f003 0201 	and.w	r2, r3, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d017      	beq.n	8000c7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2203      	movs	r2, #3
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d123      	bne.n	8000cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	6939      	ldr	r1, [r7, #16]
 8000cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0203 	and.w	r2, r3, #3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80a0 	beq.w	8000e50 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	4b58      	ldr	r3, [pc, #352]	@ (8000e74 <HAL_GPIO_Init+0x2d8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a57      	ldr	r2, [pc, #348]	@ (8000e74 <HAL_GPIO_Init+0x2d8>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b55      	ldr	r3, [pc, #340]	@ (8000e74 <HAL_GPIO_Init+0x2d8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d28:	4a53      	ldr	r2, [pc, #332]	@ (8000e78 <HAL_GPIO_Init+0x2dc>)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d52:	d019      	beq.n	8000d88 <HAL_GPIO_Init+0x1ec>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a49      	ldr	r2, [pc, #292]	@ (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d013      	beq.n	8000d84 <HAL_GPIO_Init+0x1e8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a48      	ldr	r2, [pc, #288]	@ (8000e80 <HAL_GPIO_Init+0x2e4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d00d      	beq.n	8000d80 <HAL_GPIO_Init+0x1e4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a47      	ldr	r2, [pc, #284]	@ (8000e84 <HAL_GPIO_Init+0x2e8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d007      	beq.n	8000d7c <HAL_GPIO_Init+0x1e0>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a46      	ldr	r2, [pc, #280]	@ (8000e88 <HAL_GPIO_Init+0x2ec>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d101      	bne.n	8000d78 <HAL_GPIO_Init+0x1dc>
 8000d74:	2304      	movs	r3, #4
 8000d76:	e008      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d78:	2305      	movs	r3, #5
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e004      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	f002 0203 	and.w	r2, r2, #3
 8000d90:	0092      	lsls	r2, r2, #2
 8000d92:	4093      	lsls	r3, r2
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d9a:	4937      	ldr	r1, [pc, #220]	@ (8000e78 <HAL_GPIO_Init+0x2dc>)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3302      	adds	r3, #2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da8:	4b38      	ldr	r3, [pc, #224]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000df6:	4a25      	ldr	r2, [pc, #148]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dfc:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e20:	4a1a      	ldr	r2, [pc, #104]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e4a:	4a10      	ldr	r2, [pc, #64]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f47f aea3 	bne.w	8000bac <HAL_GPIO_Init+0x10>
  }
}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	371c      	adds	r7, #28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010000 	.word	0x40010000
 8000e7c:	48000400 	.word	0x48000400
 8000e80:	48000800 	.word	0x48000800
 8000e84:	48000c00 	.word	0x48000c00
 8000e88:	48001000 	.word	0x48001000
 8000e8c:	40010400 	.word	0x40010400

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e08d      	b.n	8000fee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d106      	bne.n	8000eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fbb2 	bl	8000650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2224      	movs	r2, #36	@ 0x24
 8000ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d107      	bne.n	8000f3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	e006      	b.n	8000f48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000f46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d108      	bne.n	8000f62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	e007      	b.n	8000f72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69d9      	ldr	r1, [r3, #28]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1a      	ldr	r2, [r3, #32]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2220      	movs	r2, #32
 8000fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b20      	cmp	r3, #32
 800100a:	d138      	bne.n	800107e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001016:	2302      	movs	r3, #2
 8001018:	e032      	b.n	8001080 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2224      	movs	r2, #36	@ 0x24
 8001026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0201 	bic.w	r2, r2, #1
 8001038:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001048:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6819      	ldr	r1, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 0201 	orr.w	r2, r2, #1
 8001068:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2220      	movs	r2, #32
 800106e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800107e:	2302      	movs	r3, #2
  }
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b20      	cmp	r3, #32
 80010a0:	d139      	bne.n	8001116 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e033      	b.n	8001118 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2224      	movs	r2, #36	@ 0x24
 80010bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80010de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 0201 	orr.w	r2, r2, #1
 8001100:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2220      	movs	r2, #32
 8001106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001116:	2302      	movs	r3, #2
  }
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e0b9      	b.n	80012aa <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d106      	bne.n	8001150 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fb06 	bl	800075c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2203      	movs	r2, #3
 8001154:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fcd2 	bl	8002b06 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	e03e      	b.n	80011e6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	440b      	add	r3, r1
 8001176:	3311      	adds	r3, #17
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	440b      	add	r3, r1
 800118a:	3310      	adds	r3, #16
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	3313      	adds	r3, #19
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	3320      	adds	r3, #32
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	440b      	add	r3, r1
 80011c6:	3324      	adds	r3, #36	@ 0x24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	440b      	add	r3, r1
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	3301      	adds	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	791b      	ldrb	r3, [r3, #4]
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3bb      	bcc.n	8001168 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e044      	b.n	8001280 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	440b      	add	r3, r1
 8001204:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	440b      	add	r3, r1
 8001230:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	3301      	adds	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	791b      	ldrb	r3, [r3, #4]
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	429a      	cmp	r2, r3
 8001288:	d3b5      	bcc.n	80011f6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3304      	adds	r3, #4
 8001292:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001296:	f001 fc51 	bl	8002b3c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	f000 bff4 	b.w	80022c2 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 816d 	beq.w	80015ca <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012f0:	4bb4      	ldr	r3, [pc, #720]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d00c      	beq.n	8001316 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012fc:	4bb1      	ldr	r3, [pc, #708]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d157      	bne.n	80013b8 <HAL_RCC_OscConfig+0x104>
 8001308:	4bae      	ldr	r3, [pc, #696]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001314:	d150      	bne.n	80013b8 <HAL_RCC_OscConfig+0x104>
 8001316:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800131a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800132a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b3f      	cmp	r3, #63	@ 0x3f
 8001336:	d802      	bhi.n	800133e <HAL_RCC_OscConfig+0x8a>
 8001338:	4ba2      	ldr	r3, [pc, #648]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0xb6>
 800133e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001342:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001352:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001356:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800135a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001366:	4b97      	ldr	r3, [pc, #604]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 8001368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800136e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001372:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001376:	fa92 f2a2 	rbit	r2, r2
 800137a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800137e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001382:	fab2 f282 	clz	r2, r2
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	f042 0220 	orr.w	r2, r2, #32
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	f002 021f 	and.w	r2, r2, #31
 8001392:	2101      	movs	r1, #1
 8001394:	fa01 f202 	lsl.w	r2, r1, r2
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8114 	beq.w	80015c8 <HAL_RCC_OscConfig+0x314>
 80013a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f040 810b 	bne.w	80015c8 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f000 bf85 	b.w	80022c2 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c8:	d106      	bne.n	80013d8 <HAL_RCC_OscConfig+0x124>
 80013ca:	4b7e      	ldr	r3, [pc, #504]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7d      	ldr	r2, [pc, #500]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e036      	b.n	8001446 <HAL_RCC_OscConfig+0x192>
 80013d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10c      	bne.n	8001402 <HAL_RCC_OscConfig+0x14e>
 80013e8:	4b76      	ldr	r3, [pc, #472]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a75      	ldr	r2, [pc, #468]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 80013ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b73      	ldr	r3, [pc, #460]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a72      	ldr	r2, [pc, #456]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 80013fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e021      	b.n	8001446 <HAL_RCC_OscConfig+0x192>
 8001402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001412:	d10c      	bne.n	800142e <HAL_RCC_OscConfig+0x17a>
 8001414:	4b6b      	ldr	r3, [pc, #428]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a6a      	ldr	r2, [pc, #424]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 800141a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b68      	ldr	r3, [pc, #416]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a67      	ldr	r2, [pc, #412]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 8001426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e00b      	b.n	8001446 <HAL_RCC_OscConfig+0x192>
 800142e:	4b65      	ldr	r3, [pc, #404]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a64      	ldr	r2, [pc, #400]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 8001434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b62      	ldr	r3, [pc, #392]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a61      	ldr	r2, [pc, #388]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 8001440:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001444:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001446:	4b5f      	ldr	r3, [pc, #380]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	f023 020f 	bic.w	r2, r3, #15
 800144e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	495a      	ldr	r1, [pc, #360]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 800145c:	4313      	orrs	r3, r2
 800145e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001464:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d054      	beq.n	800151a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fa7e 	bl	8000970 <HAL_GetTick>
 8001474:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800147a:	f7ff fa79 	bl	8000970 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	@ 0x64
 8001488:	d902      	bls.n	8001490 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	f000 bf19 	b.w	80022c2 <HAL_RCC_OscConfig+0x100e>
 8001490:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001494:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001498:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800149c:	fa93 f3a3 	rbit	r3, r3
 80014a0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80014a4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80014b0:	d802      	bhi.n	80014b8 <HAL_RCC_OscConfig+0x204>
 80014b2:	4b44      	ldr	r3, [pc, #272]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	e015      	b.n	80014e4 <HAL_RCC_OscConfig+0x230>
 80014b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014bc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80014c4:	fa93 f3a3 	rbit	r3, r3
 80014c8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80014cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014d0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80014d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80014e0:	4b38      	ldr	r3, [pc, #224]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014e8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80014ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80014f0:	fa92 f2a2 	rbit	r2, r2
 80014f4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80014f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80014fc:	fab2 f282 	clz	r2, r2
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	f042 0220 	orr.w	r2, r2, #32
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	f002 021f 	and.w	r2, r2, #31
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0b0      	beq.n	800147a <HAL_RCC_OscConfig+0x1c6>
 8001518:	e057      	b.n	80015ca <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fa29 	bl	8000970 <HAL_GetTick>
 800151e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	e00a      	b.n	800153a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fa24 	bl	8000970 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b64      	cmp	r3, #100	@ 0x64
 8001532:	d902      	bls.n	800153a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	f000 bec4 	b.w	80022c2 <HAL_RCC_OscConfig+0x100e>
 800153a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800153e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800154e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b3f      	cmp	r3, #63	@ 0x3f
 800155a:	d802      	bhi.n	8001562 <HAL_RCC_OscConfig+0x2ae>
 800155c:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	e015      	b.n	800158e <HAL_RCC_OscConfig+0x2da>
 8001562:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001566:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001576:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800157a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800157e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <HAL_RCC_OscConfig+0x310>)
 800158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001592:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001596:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800159a:	fa92 f2a2 	rbit	r2, r2
 800159e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80015a2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80015a6:	fab2 f282 	clz	r2, r2
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	f042 0220 	orr.w	r2, r2, #32
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	f002 021f 	and.w	r2, r2, #31
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1b0      	bne.n	8001524 <HAL_RCC_OscConfig+0x270>
 80015c2:	e002      	b.n	80015ca <HAL_RCC_OscConfig+0x316>
 80015c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 816c 	beq.w	80018b8 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015e0:	4bcc      	ldr	r3, [pc, #816]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00b      	beq.n	8001604 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015ec:	4bc9      	ldr	r3, [pc, #804]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d16d      	bne.n	80016d4 <HAL_RCC_OscConfig+0x420>
 80015f8:	4bc6      	ldr	r3, [pc, #792]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d167      	bne.n	80016d4 <HAL_RCC_OscConfig+0x420>
 8001604:	2302      	movs	r3, #2
 8001606:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001616:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	fab3 f383 	clz	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b3f      	cmp	r3, #63	@ 0x3f
 8001622:	d802      	bhi.n	800162a <HAL_RCC_OscConfig+0x376>
 8001624:	4bbb      	ldr	r3, [pc, #748]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	e013      	b.n	8001652 <HAL_RCC_OscConfig+0x39e>
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001642:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001646:	fa93 f3a3 	rbit	r3, r3
 800164a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800164e:	4bb1      	ldr	r3, [pc, #708]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	2202      	movs	r2, #2
 8001654:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001658:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800165c:	fa92 f2a2 	rbit	r2, r2
 8001660:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001664:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001668:	fab2 f282 	clz	r2, r2
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	f042 0220 	orr.w	r2, r2, #32
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	f002 021f 	and.w	r2, r2, #31
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00a      	beq.n	800169a <HAL_RCC_OscConfig+0x3e6>
 8001684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001688:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d002      	beq.n	800169a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	f000 be14 	b.w	80022c2 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	4b9e      	ldr	r3, [pc, #632]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	21f8      	movs	r1, #248	@ 0xf8
 80016b0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80016b8:	fa91 f1a1 	rbit	r1, r1
 80016bc:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80016c0:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80016c4:	fab1 f181 	clz	r1, r1
 80016c8:	b2c9      	uxtb	r1, r1
 80016ca:	408b      	lsls	r3, r1
 80016cc:	4991      	ldr	r1, [pc, #580]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d2:	e0f1      	b.n	80018b8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8083 	beq.w	80017ec <HAL_RCC_OscConfig+0x538>
 80016e6:	2301      	movs	r3, #1
 80016e8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80016f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001706:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	461a      	mov	r2, r3
 800170e:	2301      	movs	r3, #1
 8001710:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7ff f92d 	bl	8000970 <HAL_GetTick>
 8001716:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171a:	e00a      	b.n	8001732 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff f928 	bl	8000970 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d902      	bls.n	8001732 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	f000 bdc8 	b.w	80022c2 <HAL_RCC_OscConfig+0x100e>
 8001732:	2302      	movs	r3, #2
 8001734:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800173c:	fa93 f3a3 	rbit	r3, r3
 8001740:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001744:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	fab3 f383 	clz	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001750:	d802      	bhi.n	8001758 <HAL_RCC_OscConfig+0x4a4>
 8001752:	4b70      	ldr	r3, [pc, #448]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	e013      	b.n	8001780 <HAL_RCC_OscConfig+0x4cc>
 8001758:	2302      	movs	r3, #2
 800175a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001762:	fa93 f3a3 	rbit	r3, r3
 8001766:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800176a:	2302      	movs	r3, #2
 800176c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001770:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800177c:	4b65      	ldr	r3, [pc, #404]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	2202      	movs	r2, #2
 8001782:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001786:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800178a:	fa92 f2a2 	rbit	r2, r2
 800178e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001792:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001796:	fab2 f282 	clz	r2, r2
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	f042 0220 	orr.w	r2, r2, #32
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f002 021f 	and.w	r2, r2, #31
 80017a6:	2101      	movs	r1, #1
 80017a8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0b4      	beq.n	800171c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b2:	4b58      	ldr	r3, [pc, #352]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	21f8      	movs	r1, #248	@ 0xf8
 80017c8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80017d0:	fa91 f1a1 	rbit	r1, r1
 80017d4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80017d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80017dc:	fab1 f181 	clz	r1, r1
 80017e0:	b2c9      	uxtb	r1, r1
 80017e2:	408b      	lsls	r3, r1
 80017e4:	494b      	ldr	r1, [pc, #300]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
 80017ea:	e065      	b.n	80018b8 <HAL_RCC_OscConfig+0x604>
 80017ec:	2301      	movs	r3, #1
 80017ee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80017fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001802:	fab3 f383 	clz	r3, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800180c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	461a      	mov	r2, r3
 8001814:	2300      	movs	r3, #0
 8001816:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff f8aa 	bl	8000970 <HAL_GetTick>
 800181c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff f8a5 	bl	8000970 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d902      	bls.n	8001838 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	f000 bd45 	b.w	80022c2 <HAL_RCC_OscConfig+0x100e>
 8001838:	2302      	movs	r3, #2
 800183a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001842:	fa93 f3a3 	rbit	r3, r3
 8001846:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800184a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	fab3 f383 	clz	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b3f      	cmp	r3, #63	@ 0x3f
 8001856:	d802      	bhi.n	800185e <HAL_RCC_OscConfig+0x5aa>
 8001858:	4b2e      	ldr	r3, [pc, #184]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	e013      	b.n	8001886 <HAL_RCC_OscConfig+0x5d2>
 800185e:	2302      	movs	r3, #2
 8001860:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001868:	fa93 f3a3 	rbit	r3, r3
 800186c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001870:	2302      	movs	r3, #2
 8001872:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001876:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001882:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <HAL_RCC_OscConfig+0x660>)
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	2202      	movs	r2, #2
 8001888:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800188c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001890:	fa92 f2a2 	rbit	r2, r2
 8001894:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001898:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800189c:	fab2 f282 	clz	r2, r2
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	f042 0220 	orr.w	r2, r2, #32
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	f002 021f 	and.w	r2, r2, #31
 80018ac:	2101      	movs	r1, #1
 80018ae:	fa01 f202 	lsl.w	r2, r1, r2
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1b4      	bne.n	8001822 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 8115 	beq.w	8001af8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d07e      	beq.n	80019dc <HAL_RCC_OscConfig+0x728>
 80018de:	2301      	movs	r3, #1
 80018e0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80018f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_RCC_OscConfig+0x664>)
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	461a      	mov	r2, r3
 8001904:	2301      	movs	r3, #1
 8001906:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff f832 	bl	8000970 <HAL_GetTick>
 800190c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001910:	e00f      	b.n	8001932 <HAL_RCC_OscConfig+0x67e>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff f828 	bl	8000970 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d902      	bls.n	8001932 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	f000 bcc8 	b.w	80022c2 <HAL_RCC_OscConfig+0x100e>
 8001932:	2302      	movs	r3, #2
 8001934:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001948:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800194c:	2202      	movs	r2, #2
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001954:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	fa93 f2a3 	rbit	r2, r3
 800195e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001970:	2202      	movs	r2, #2
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001986:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800198a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198c:	4bb0      	ldr	r3, [pc, #704]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 800198e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001994:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001998:	2102      	movs	r1, #2
 800199a:	6019      	str	r1, [r3, #0]
 800199c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	fa93 f1a3 	rbit	r1, r3
 80019aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019b2:	6019      	str	r1, [r3, #0]
  return result;
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0a0      	beq.n	800191c <HAL_RCC_OscConfig+0x668>
 80019da:	e08d      	b.n	8001af8 <HAL_RCC_OscConfig+0x844>
 80019dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	fa93 f2a3 	rbit	r2, r3
 80019f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80019fe:	601a      	str	r2, [r3, #0]
  return result;
 8001a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a04:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b90      	ldr	r3, [pc, #576]	@ (8001c54 <HAL_RCC_OscConfig+0x9a0>)
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7fe ffa7 	bl	8000970 <HAL_GetTick>
 8001a22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a28:	f7fe ffa2 	bl	8000970 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d902      	bls.n	8001a3e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	f000 bc42 	b.w	80022c2 <HAL_RCC_OscConfig+0x100e>
 8001a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a42:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a46:	2202      	movs	r2, #2
 8001a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fa93 f2a3 	rbit	r2, r3
 8001a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a8e:	2202      	movs	r2, #2
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f2a3 	rbit	r2, r3
 8001aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001aa8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aaa:	4b69      	ldr	r3, [pc, #420]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	6019      	str	r1, [r3, #0]
 8001aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001abe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f1a3 	rbit	r1, r3
 8001ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001acc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ad0:	6019      	str	r1, [r3, #0]
  return result;
 8001ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d197      	bne.n	8001a28 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 819e 	beq.w	8001e4a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b14:	4b4e      	ldr	r3, [pc, #312]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d116      	bne.n	8001b4e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	4b4b      	ldr	r3, [pc, #300]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	4a4a      	ldr	r2, [pc, #296]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	61d3      	str	r3, [r2, #28]
 8001b2c:	4b48      	ldr	r3, [pc, #288]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b38:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b42:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001b46:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b42      	ldr	r3, [pc, #264]	@ (8001c58 <HAL_RCC_OscConfig+0x9a4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11a      	bne.n	8001b90 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c58 <HAL_RCC_OscConfig+0x9a4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c58 <HAL_RCC_OscConfig+0x9a4>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7fe ff03 	bl	8000970 <HAL_GetTick>
 8001b6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6e:	e009      	b.n	8001b84 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b70:	f7fe fefe 	bl	8000970 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b64      	cmp	r3, #100	@ 0x64
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e39e      	b.n	80022c2 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	4b34      	ldr	r3, [pc, #208]	@ (8001c58 <HAL_RCC_OscConfig+0x9a4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ef      	beq.n	8001b70 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x8fa>
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e035      	b.n	8001c1a <HAL_RCC_OscConfig+0x966>
 8001bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x924>
 8001bbe:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	4a23      	ldr	r2, [pc, #140]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6213      	str	r3, [r2, #32]
 8001bca:	4b21      	ldr	r3, [pc, #132]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a20      	ldr	r2, [pc, #128]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001bd0:	f023 0304 	bic.w	r3, r3, #4
 8001bd4:	6213      	str	r3, [r2, #32]
 8001bd6:	e020      	b.n	8001c1a <HAL_RCC_OscConfig+0x966>
 8001bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b05      	cmp	r3, #5
 8001be6:	d10c      	bne.n	8001c02 <HAL_RCC_OscConfig+0x94e>
 8001be8:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a18      	ldr	r2, [pc, #96]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	6213      	str	r3, [r2, #32]
 8001bf4:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4a15      	ldr	r2, [pc, #84]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6213      	str	r3, [r2, #32]
 8001c00:	e00b      	b.n	8001c1a <HAL_RCC_OscConfig+0x966>
 8001c02:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	6213      	str	r3, [r2, #32]
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4a0f      	ldr	r2, [pc, #60]	@ (8001c50 <HAL_RCC_OscConfig+0x99c>)
 8001c14:	f023 0304 	bic.w	r3, r3, #4
 8001c18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8087 	beq.w	8001d3a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2c:	f7fe fea0 	bl	8000970 <HAL_GetTick>
 8001c30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	e012      	b.n	8001c5c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7fe fe9b 	bl	8000970 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d908      	bls.n	8001c5c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e339      	b.n	80022c2 <HAL_RCC_OscConfig+0x100e>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	10908120 	.word	0x10908120
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c60:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c64:	2202      	movs	r2, #2
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001c88:	2202      	movs	r2, #2
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c90:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ca2:	601a      	str	r2, [r3, #0]
  return result;
 8001ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xa10>
 8001cbe:	4b98      	ldr	r3, [pc, #608]	@ (8001f20 <HAL_RCC_OscConfig+0xc6c>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	e013      	b.n	8001cec <HAL_RCC_OscConfig+0xa38>
 8001cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001ccc:	2202      	movs	r2, #2
 8001cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	4b8d      	ldr	r3, [pc, #564]	@ (8001f20 <HAL_RCC_OscConfig+0xc6c>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cf0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	6011      	str	r1, [r2, #0]
 8001cf8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cfc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	fa92 f1a2 	rbit	r1, r2
 8001d06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d0a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d0e:	6011      	str	r1, [r2, #0]
  return result;
 8001d10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d14:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	fab2 f282 	clz	r2, r2
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	f002 021f 	and.w	r2, r2, #31
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f43f af7f 	beq.w	8001c36 <HAL_RCC_OscConfig+0x982>
 8001d38:	e07d      	b.n	8001e36 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7fe fe19 	bl	8000970 <HAL_GetTick>
 8001d3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d44:	f7fe fe14 	bl	8000970 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e2b2      	b.n	80022c2 <HAL_RCC_OscConfig+0x100e>
 8001d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d60:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001d64:	2202      	movs	r2, #2
 8001d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	fa93 f2a3 	rbit	r2, r3
 8001d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d84:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d88:	2202      	movs	r2, #2
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d90:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	fa93 f2a3 	rbit	r2, r3
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001da2:	601a      	str	r2, [r3, #0]
  return result;
 8001da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001dac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xb10>
 8001dbe:	4b58      	ldr	r3, [pc, #352]	@ (8001f20 <HAL_RCC_OscConfig+0xc6c>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	e013      	b.n	8001dec <HAL_RCC_OscConfig+0xb38>
 8001dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001dcc:	2202      	movs	r2, #2
 8001dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	4b4d      	ldr	r3, [pc, #308]	@ (8001f20 <HAL_RCC_OscConfig+0xc6c>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001df0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001df4:	2102      	movs	r1, #2
 8001df6:	6011      	str	r1, [r2, #0]
 8001df8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dfc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	fa92 f1a2 	rbit	r1, r2
 8001e06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e0a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e0e:	6011      	str	r1, [r2, #0]
  return result;
 8001e10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e14:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	fab2 f282 	clz	r2, r2
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f002 021f 	and.w	r2, r2, #31
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d186      	bne.n	8001d44 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e36:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d105      	bne.n	8001e4a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b38      	ldr	r3, [pc, #224]	@ (8001f20 <HAL_RCC_OscConfig+0xc6c>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a37      	ldr	r2, [pc, #220]	@ (8001f20 <HAL_RCC_OscConfig+0xc6c>)
 8001e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8232 	beq.w	80022c0 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e5c:	4b30      	ldr	r3, [pc, #192]	@ (8001f20 <HAL_RCC_OscConfig+0xc6c>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	f000 8201 	beq.w	800226c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	f040 8157 	bne.w	800212a <HAL_RCC_OscConfig+0xe76>
 8001e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e80:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001e84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	fa93 f2a3 	rbit	r2, r3
 8001e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001ea0:	601a      	str	r2, [r3, #0]
  return result;
 8001ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001eaa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001eb6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7fe fd55 	bl	8000970 <HAL_GetTick>
 8001ec6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eca:	e009      	b.n	8001ee0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7fe fd50 	bl	8000970 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e1f0      	b.n	80022c2 <HAL_RCC_OscConfig+0x100e>
 8001ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ee8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	fa93 f2a3 	rbit	r2, r3
 8001efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f00:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f04:	601a      	str	r2, [r3, #0]
  return result;
 8001f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f18:	d804      	bhi.n	8001f24 <HAL_RCC_OscConfig+0xc70>
 8001f1a:	4b01      	ldr	r3, [pc, #4]	@ (8001f20 <HAL_RCC_OscConfig+0xc6c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	e029      	b.n	8001f74 <HAL_RCC_OscConfig+0xcc0>
 8001f20:	40021000 	.word	0x40021000
 8001f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f28:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f36:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fa93 f2a3 	rbit	r2, r3
 8001f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f44:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001f52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fa93 f2a3 	rbit	r2, r3
 8001f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	4bc3      	ldr	r3, [pc, #780]	@ (8002280 <HAL_RCC_OscConfig+0xfcc>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f78:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001f7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f80:	6011      	str	r1, [r2, #0]
 8001f82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f86:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	fa92 f1a2 	rbit	r1, r2
 8001f90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f94:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f98:	6011      	str	r1, [r2, #0]
  return result;
 8001f9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f9e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f042 0220 	orr.w	r2, r2, #32
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f002 021f 	and.w	r2, r2, #31
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d185      	bne.n	8001ecc <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc0:	4baf      	ldr	r3, [pc, #700]	@ (8002280 <HAL_RCC_OscConfig+0xfcc>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	49a7      	ldr	r1, [pc, #668]	@ (8002280 <HAL_RCC_OscConfig+0xfcc>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
 8001fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fec:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ff0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f2a3 	rbit	r2, r3
 8002004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002008:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800200c:	601a      	str	r2, [r3, #0]
  return result;
 800200e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002012:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002016:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002022:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	461a      	mov	r2, r3
 800202a:	2301      	movs	r3, #1
 800202c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7fe fc9f 	bl	8000970 <HAL_GetTick>
 8002032:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002036:	e009      	b.n	800204c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002038:	f7fe fc9a 	bl	8000970 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e13a      	b.n	80022c2 <HAL_RCC_OscConfig+0x100e>
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002054:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	fa93 f2a3 	rbit	r2, r3
 8002068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002070:	601a      	str	r2, [r3, #0]
  return result;
 8002072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002076:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800207a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b3f      	cmp	r3, #63	@ 0x3f
 8002084:	d802      	bhi.n	800208c <HAL_RCC_OscConfig+0xdd8>
 8002086:	4b7e      	ldr	r3, [pc, #504]	@ (8002280 <HAL_RCC_OscConfig+0xfcc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	e027      	b.n	80020dc <HAL_RCC_OscConfig+0xe28>
 800208c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002090:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002094:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	fa93 f2a3 	rbit	r2, r3
 80020a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80020ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	fa93 f2a3 	rbit	r2, r3
 80020ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	4b69      	ldr	r3, [pc, #420]	@ (8002280 <HAL_RCC_OscConfig+0xfcc>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020e0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80020e4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020e8:	6011      	str	r1, [r2, #0]
 80020ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020ee:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	fa92 f1a2 	rbit	r1, r2
 80020f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020fc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002100:	6011      	str	r1, [r2, #0]
  return result;
 8002102:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002106:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	fab2 f282 	clz	r2, r2
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f042 0220 	orr.w	r2, r2, #32
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f002 021f 	and.w	r2, r2, #31
 800211c:	2101      	movs	r1, #1
 800211e:	fa01 f202 	lsl.w	r2, r1, r2
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d087      	beq.n	8002038 <HAL_RCC_OscConfig+0xd84>
 8002128:	e0ca      	b.n	80022c0 <HAL_RCC_OscConfig+0x100c>
 800212a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002132:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fa93 f2a3 	rbit	r2, r3
 8002146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800214e:	601a      	str	r2, [r3, #0]
  return result;
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002158:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002164:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	461a      	mov	r2, r3
 800216c:	2300      	movs	r3, #0
 800216e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fbfe 	bl	8000970 <HAL_GetTick>
 8002174:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002178:	e009      	b.n	800218e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217a:	f7fe fbf9 	bl	8000970 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e099      	b.n	80022c2 <HAL_RCC_OscConfig+0x100e>
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002196:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800219a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ae:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80021b2:	601a      	str	r2, [r3, #0]
  return result;
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80021bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80021c6:	d802      	bhi.n	80021ce <HAL_RCC_OscConfig+0xf1a>
 80021c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002280 <HAL_RCC_OscConfig+0xfcc>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	e027      	b.n	800221e <HAL_RCC_OscConfig+0xf6a>
 80021ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80021d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	fa93 f2a3 	rbit	r2, r3
 80021ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ee:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80021fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002206:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	fa93 f2a3 	rbit	r2, r3
 8002210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002214:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_RCC_OscConfig+0xfcc>)
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002222:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002226:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800222a:	6011      	str	r1, [r2, #0]
 800222c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002230:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	fa92 f1a2 	rbit	r1, r2
 800223a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800223e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002242:	6011      	str	r1, [r2, #0]
  return result;
 8002244:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002248:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	fab2 f282 	clz	r2, r2
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	f042 0220 	orr.w	r2, r2, #32
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	f002 021f 	and.w	r2, r2, #31
 800225e:	2101      	movs	r1, #1
 8002260:	fa01 f202 	lsl.w	r2, r1, r2
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d187      	bne.n	800217a <HAL_RCC_OscConfig+0xec6>
 800226a:	e029      	b.n	80022c0 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002270:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d103      	bne.n	8002284 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e020      	b.n	80022c2 <HAL_RCC_OscConfig+0x100e>
 8002280:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002284:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <HAL_RCC_OscConfig+0x1018>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800228c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002290:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002298:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d10b      	bne.n	80022bc <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80022a4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80022a8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000

080022d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b09e      	sub	sp, #120	@ 0x78
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e154      	b.n	8002592 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b89      	ldr	r3, [pc, #548]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d910      	bls.n	8002318 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b86      	ldr	r3, [pc, #536]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	4984      	ldr	r1, [pc, #528]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b82      	ldr	r3, [pc, #520]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e13c      	b.n	8002592 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b7b      	ldr	r3, [pc, #492]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4978      	ldr	r1, [pc, #480]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80cd 	beq.w	80024de <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d137      	bne.n	80023bc <HAL_RCC_ClockConfig+0xec>
 800234c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002350:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800235a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b3f      	cmp	r3, #63	@ 0x3f
 8002364:	d802      	bhi.n	800236c <HAL_RCC_ClockConfig+0x9c>
 8002366:	4b6b      	ldr	r3, [pc, #428]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	e00f      	b.n	800238c <HAL_RCC_ClockConfig+0xbc>
 800236c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002370:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	667b      	str	r3, [r7, #100]	@ 0x64
 800237a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800237e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002380:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002388:	4b62      	ldr	r3, [pc, #392]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002390:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002392:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002394:	fa92 f2a2 	rbit	r2, r2
 8002398:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800239a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800239c:	fab2 f282 	clz	r2, r2
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f042 0220 	orr.w	r2, r2, #32
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	f002 021f 	and.w	r2, r2, #31
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f202 	lsl.w	r2, r1, r2
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d171      	bne.n	800249c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0ea      	b.n	8002592 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d137      	bne.n	8002434 <HAL_RCC_ClockConfig+0x164>
 80023c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023c8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80023d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b3f      	cmp	r3, #63	@ 0x3f
 80023dc:	d802      	bhi.n	80023e4 <HAL_RCC_ClockConfig+0x114>
 80023de:	4b4d      	ldr	r3, [pc, #308]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	e00f      	b.n	8002404 <HAL_RCC_ClockConfig+0x134>
 80023e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80023f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80023f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002400:	4b44      	ldr	r3, [pc, #272]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002408:	63ba      	str	r2, [r7, #56]	@ 0x38
 800240a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800240c:	fa92 f2a2 	rbit	r2, r2
 8002410:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002414:	fab2 f282 	clz	r2, r2
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f042 0220 	orr.w	r2, r2, #32
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	f002 021f 	and.w	r2, r2, #31
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f202 	lsl.w	r2, r1, r2
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d135      	bne.n	800249c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0ae      	b.n	8002592 <HAL_RCC_ClockConfig+0x2c2>
 8002434:	2302      	movs	r3, #2
 8002436:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b3f      	cmp	r3, #63	@ 0x3f
 800244a:	d802      	bhi.n	8002452 <HAL_RCC_ClockConfig+0x182>
 800244c:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	e00d      	b.n	800246e <HAL_RCC_ClockConfig+0x19e>
 8002452:	2302      	movs	r3, #2
 8002454:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
 800245e:	2302      	movs	r3, #2
 8002460:	623b      	str	r3, [r7, #32]
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	2202      	movs	r2, #2
 8002470:	61ba      	str	r2, [r7, #24]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	617a      	str	r2, [r7, #20]
  return result;
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f042 0220 	orr.w	r2, r2, #32
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f002 021f 	and.w	r2, r2, #31
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f202 	lsl.w	r2, r1, r2
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e07a      	b.n	8002592 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249c:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 0203 	bic.w	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	491a      	ldr	r1, [pc, #104]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ae:	f7fe fa5f 	bl	8000970 <HAL_GetTick>
 80024b2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b6:	f7fe fa5b 	bl	8000970 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e062      	b.n	8002592 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024cc:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 020c 	and.w	r2, r3, #12
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	429a      	cmp	r2, r3
 80024dc:	d1eb      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024de:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d215      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ec:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 0207 	bic.w	r2, r3, #7
 80024f4:	4906      	ldr	r1, [pc, #24]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fc:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d006      	beq.n	8002518 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e041      	b.n	8002592 <HAL_RCC_ClockConfig+0x2c2>
 800250e:	bf00      	nop
 8002510:	40022000 	.word	0x40022000
 8002514:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002524:	4b1d      	ldr	r3, [pc, #116]	@ (800259c <HAL_RCC_ClockConfig+0x2cc>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	491a      	ldr	r1, [pc, #104]	@ (800259c <HAL_RCC_ClockConfig+0x2cc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002542:	4b16      	ldr	r3, [pc, #88]	@ (800259c <HAL_RCC_ClockConfig+0x2cc>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4912      	ldr	r1, [pc, #72]	@ (800259c <HAL_RCC_ClockConfig+0x2cc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002556:	f000 f829 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 800255a:	4601      	mov	r1, r0
 800255c:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <HAL_RCC_ClockConfig+0x2cc>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002564:	22f0      	movs	r2, #240	@ 0xf0
 8002566:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	fa92 f2a2 	rbit	r2, r2
 800256e:	60fa      	str	r2, [r7, #12]
  return result;
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	fab2 f282 	clz	r2, r2
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	40d3      	lsrs	r3, r2
 800257a:	4a09      	ldr	r2, [pc, #36]	@ (80025a0 <HAL_RCC_ClockConfig+0x2d0>)
 800257c:	5cd3      	ldrb	r3, [r2, r3]
 800257e:	fa21 f303 	lsr.w	r3, r1, r3
 8002582:	4a08      	ldr	r2, [pc, #32]	@ (80025a4 <HAL_RCC_ClockConfig+0x2d4>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002586:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <HAL_RCC_ClockConfig+0x2d8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe f9ac 	bl	80008e8 <HAL_InitTick>
  
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3778      	adds	r7, #120	@ 0x78
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	080038a8 	.word	0x080038a8
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000004 	.word	0x20000004

080025ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80025c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x94>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x30>
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x36>
 80025da:	e026      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025dc:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x98>)
 80025de:	613b      	str	r3, [r7, #16]
      break;
 80025e0:	e026      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	0c9b      	lsrs	r3, r3, #18
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025ec:	5cd3      	ldrb	r3, [r2, r3]
 80025ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80025f0:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x94>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	4a14      	ldr	r2, [pc, #80]	@ (800264c <HAL_RCC_GetSysClockFreq+0xa0>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002608:	4a0e      	ldr	r2, [pc, #56]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x98>)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	e004      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a0c      	ldr	r2, [pc, #48]	@ (8002650 <HAL_RCC_GetSysClockFreq+0xa4>)
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
      break;
 8002628:	e002      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x98>)
 800262c:	613b      	str	r3, [r7, #16]
      break;
 800262e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002630:	693b      	ldr	r3, [r7, #16]
}
 8002632:	4618      	mov	r0, r3
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	007a1200 	.word	0x007a1200
 8002648:	080038b8 	.word	0x080038b8
 800264c:	080038c8 	.word	0x080038c8
 8002650:	003d0900 	.word	0x003d0900

08002654 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b092      	sub	sp, #72	@ 0x48
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80d2 	beq.w	800281c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002678:	4b4d      	ldr	r3, [pc, #308]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10e      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	4b4a      	ldr	r3, [pc, #296]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4a49      	ldr	r2, [pc, #292]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800268a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800268e:	61d3      	str	r3, [r2, #28]
 8002690:	4b47      	ldr	r3, [pc, #284]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b44      	ldr	r3, [pc, #272]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4b41      	ldr	r3, [pc, #260]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a40      	ldr	r2, [pc, #256]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ba:	f7fe f959 	bl	8000970 <HAL_GetTick>
 80026be:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e008      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7fe f955 	bl	8000970 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	@ 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e167      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b37      	ldr	r3, [pc, #220]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026e0:	4b33      	ldr	r3, [pc, #204]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8082 	beq.w	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d07a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002700:	4b2b      	ldr	r3, [pc, #172]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800270a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800270e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	4b25      	ldr	r3, [pc, #148]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	461a      	mov	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002732:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800273c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	4b1c      	ldr	r3, [pc, #112]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	461a      	mov	r2, r3
 800274e:	2300      	movs	r3, #0
 8002750:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002752:	4a17      	ldr	r2, [pc, #92]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002756:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d049      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe f905 	bl	8000970 <HAL_GetTick>
 8002766:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe f901 	bl	8000970 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e111      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002780:	2302      	movs	r3, #2
 8002782:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24
 800278c:	2302      	movs	r3, #2
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	61fb      	str	r3, [r7, #28]
  return result;
 8002798:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80027aa:	4b01      	ldr	r3, [pc, #4]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	e00d      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40007000 	.word	0x40007000
 80027b8:	10908100 	.word	0x10908100
 80027bc:	2302      	movs	r3, #2
 80027be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	4b78      	ldr	r3, [pc, #480]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	2202      	movs	r2, #2
 80027ce:	613a      	str	r2, [r7, #16]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	fa92 f2a2 	rbit	r2, r2
 80027d6:	60fa      	str	r2, [r7, #12]
  return result;
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	fab2 f282 	clz	r2, r2
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	f002 021f 	and.w	r2, r2, #31
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f202 	lsl.w	r2, r1, r2
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0b9      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80027f6:	4b6d      	ldr	r3, [pc, #436]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	496a      	ldr	r1, [pc, #424]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002804:	4313      	orrs	r3, r2
 8002806:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002808:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002810:	4b66      	ldr	r3, [pc, #408]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	4a65      	ldr	r2, [pc, #404]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002828:	4b60      	ldr	r3, [pc, #384]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	f023 0203 	bic.w	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	495d      	ldr	r1, [pc, #372]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002836:	4313      	orrs	r3, r2
 8002838:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002846:	4b59      	ldr	r3, [pc, #356]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4956      	ldr	r1, [pc, #344]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002854:	4313      	orrs	r3, r2
 8002856:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002864:	4b51      	ldr	r3, [pc, #324]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002868:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	494e      	ldr	r1, [pc, #312]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002872:	4313      	orrs	r3, r2
 8002874:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002882:	4b4a      	ldr	r3, [pc, #296]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	f023 0210 	bic.w	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4947      	ldr	r1, [pc, #284]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002890:	4313      	orrs	r3, r2
 8002892:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028a0:	4b42      	ldr	r3, [pc, #264]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ac:	493f      	ldr	r1, [pc, #252]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028be:	4b3b      	ldr	r3, [pc, #236]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f023 0220 	bic.w	r2, r3, #32
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4938      	ldr	r1, [pc, #224]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028dc:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	4930      	ldr	r1, [pc, #192]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028fa:	4b2c      	ldr	r3, [pc, #176]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4929      	ldr	r1, [pc, #164]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002908:	4313      	orrs	r3, r2
 800290a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002918:	4b24      	ldr	r3, [pc, #144]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	4921      	ldr	r1, [pc, #132]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002936:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	491a      	ldr	r1, [pc, #104]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002944:	4313      	orrs	r3, r2
 8002946:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002954:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002960:	4912      	ldr	r1, [pc, #72]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002962:	4313      	orrs	r3, r2
 8002964:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002972:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	490b      	ldr	r1, [pc, #44]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002980:	4313      	orrs	r3, r2
 8002982:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002994:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299c:	4903      	ldr	r1, [pc, #12]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3748      	adds	r7, #72	@ 0x48
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000

080029b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e09d      	b.n	8002afe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029d2:	d009      	beq.n	80029e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
 80029da:	e005      	b.n	80029e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fd fe68 	bl	80006d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a28:	d902      	bls.n	8002a30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e002      	b.n	8002a36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002a3e:	d007      	beq.n	8002a50 <HAL_SPI_Init+0xa0>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a48:	d002      	beq.n	8002a50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	ea42 0103 	orr.w	r1, r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	0c1b      	lsrs	r3, r3, #16
 8002aac:	f003 0204 	and.w	r2, r3, #4
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002acc:	ea42 0103 	orr.w	r1, r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b0e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002b12:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	4013      	ands	r3, r2
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <arm_fft>:
 8002b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7c:	ed2d 8b02 	vpush	{d8}
 8002b80:	2a01      	cmp	r2, #1
 8002b82:	b087      	sub	sp, #28
 8002b84:	460d      	mov	r5, r1
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	d079      	beq.n	8002c7e <arm_fft+0x106>
 8002b8a:	4693      	mov	fp, r2
 8002b8c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8002b90:	ea4f 0a62 	mov.w	sl, r2, asr #1
 8002b94:	dd7c      	ble.n	8002c90 <arm_fft+0x118>
 8002b96:	f8df e128 	ldr.w	lr, [pc, #296]	@ 8002cc0 <arm_fft+0x148>
 8002b9a:	4a48      	ldr	r2, [pc, #288]	@ (8002cbc <arm_fft+0x144>)
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2400      	movs	r4, #0
 8002ba0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ba4:	eb0e 06c4 	add.w	r6, lr, r4, lsl #3
 8002ba8:	e886 0003 	stmia.w	r6, {r0, r1}
 8002bac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bb0:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
 8002bb4:	3401      	adds	r4, #1
 8002bb6:	4554      	cmp	r4, sl
 8002bb8:	e886 0003 	stmia.w	r6, {r0, r1}
 8002bbc:	f103 0310 	add.w	r3, r3, #16
 8002bc0:	dbee      	blt.n	8002ba0 <arm_fft+0x28>
 8002bc2:	466b      	mov	r3, sp
 8002bc4:	ee08 3a10 	vmov	s16, r3
 8002bc8:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8002bcc:	469d      	mov	sp, r3
 8002bce:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8002bd2:	46e8      	mov	r8, sp
 8002bd4:	469d      	mov	sp, r3
 8002bd6:	483a      	ldr	r0, [pc, #232]	@ (8002cc0 <arm_fft+0x148>)
 8002bd8:	4641      	mov	r1, r8
 8002bda:	4652      	mov	r2, sl
 8002bdc:	466e      	mov	r6, sp
 8002bde:	f7ff ffcb 	bl	8002b78 <arm_fft>
 8002be2:	4836      	ldr	r0, [pc, #216]	@ (8002cbc <arm_fft+0x144>)
 8002be4:	4652      	mov	r2, sl
 8002be6:	4631      	mov	r1, r6
 8002be8:	f7ff ffc6 	bl	8002b78 <arm_fft>
 8002bec:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	f04f 0900 	mov.w	r9, #0
 8002bf6:	4648      	mov	r0, r9
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	f000 f881 	bl	8002d00 <esponenziale_negj>
 8002bfe:	eb06 03c9 	add.w	r3, r6, r9, lsl #3
 8002c02:	ed93 1a00 	vldr	s2, [r3]
 8002c06:	edd3 1a01 	vldr	s3, [r3, #4]
 8002c0a:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c0e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002c12:	f000 f867 	bl	8002ce4 <prodotto_c>
 8002c16:	ea4f 04c9 	mov.w	r4, r9, lsl #3
 8002c1a:	4444      	add	r4, r8
 8002c1c:	eeb0 1a40 	vmov.f32	s2, s0
 8002c20:	eef0 1a60 	vmov.f32	s3, s1
 8002c24:	ed94 0a00 	vldr	s0, [r4]
 8002c28:	edd4 0a01 	vldr	s1, [r4, #4]
 8002c2c:	edc7 1a05 	vstr	s3, [r7, #20]
 8002c30:	ed87 1a04 	vstr	s2, [r7, #16]
 8002c34:	f000 f846 	bl	8002cc4 <somma_c>
 8002c38:	ed97 1a04 	vldr	s2, [r7, #16]
 8002c3c:	ed85 0a00 	vstr	s0, [r5]
 8002c40:	edc5 0a01 	vstr	s1, [r5, #4]
 8002c44:	ed94 0a00 	vldr	s0, [r4]
 8002c48:	edd4 0a01 	vldr	s1, [r4, #4]
 8002c4c:	edd7 1a05 	vldr	s3, [r7, #20]
 8002c50:	f000 f840 	bl	8002cd4 <sottrazione_c>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f109 0901 	add.w	r9, r9, #1
 8002c5a:	442b      	add	r3, r5
 8002c5c:	45d1      	cmp	r9, sl
 8002c5e:	ed83 0a00 	vstr	s0, [r3]
 8002c62:	f105 0508 	add.w	r5, r5, #8
 8002c66:	edc3 0a01 	vstr	s1, [r3, #4]
 8002c6a:	dbc4      	blt.n	8002bf6 <arm_fft+0x7e>
 8002c6c:	ee18 3a10 	vmov	r3, s16
 8002c70:	371c      	adds	r7, #28
 8002c72:	469d      	mov	sp, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	ecbd 8b02 	vpop	{d8}
 8002c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c7e:	c803      	ldmia	r0, {r0, r1}
 8002c80:	371c      	adds	r7, #28
 8002c82:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c86:	46bd      	mov	sp, r7
 8002c88:	ecbd 8b02 	vpop	{d8}
 8002c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c90:	466b      	mov	r3, sp
 8002c92:	ee08 3a10 	vmov	s16, r3
 8002c96:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8002c9a:	469d      	mov	sp, r3
 8002c9c:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8002ca0:	4669      	mov	r1, sp
 8002ca2:	469d      	mov	sp, r3
 8002ca4:	4652      	mov	r2, sl
 8002ca6:	4806      	ldr	r0, [pc, #24]	@ (8002cc0 <arm_fft+0x148>)
 8002ca8:	466c      	mov	r4, sp
 8002caa:	f7ff ff65 	bl	8002b78 <arm_fft>
 8002cae:	4803      	ldr	r0, [pc, #12]	@ (8002cbc <arm_fft+0x144>)
 8002cb0:	4652      	mov	r2, sl
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	f7ff ff60 	bl	8002b78 <arm_fft>
 8002cb8:	e7d8      	b.n	8002c6c <arm_fft+0xf4>
 8002cba:	bf00      	nop
 8002cbc:	200003b8 	.word	0x200003b8
 8002cc0:	200023b8 	.word	0x200023b8

08002cc4 <somma_c>:
 8002cc4:	ee30 0a01 	vadd.f32	s0, s0, s2
 8002cc8:	ee70 0aa1 	vadd.f32	s1, s1, s3
 8002ccc:	b088      	sub	sp, #32
 8002cce:	b008      	add	sp, #32
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop

08002cd4 <sottrazione_c>:
 8002cd4:	ee30 0a41 	vsub.f32	s0, s0, s2
 8002cd8:	ee70 0ae1 	vsub.f32	s1, s1, s3
 8002cdc:	b088      	sub	sp, #32
 8002cde:	b008      	add	sp, #32
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop

08002ce4 <prodotto_c>:
 8002ce4:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8002ce8:	ee60 0a81 	vmul.f32	s1, s1, s2
 8002cec:	eee0 7a01 	vfma.f32	s15, s0, s2
 8002cf0:	b088      	sub	sp, #32
 8002cf2:	eee0 0a21 	vfma.f32	s1, s0, s3
 8002cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfa:	b008      	add	sp, #32
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop

08002d00 <esponenziale_negj>:
 8002d00:	ee07 0a90 	vmov	s15, r0
 8002d04:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002d4c <esponenziale_negj+0x4c>
 8002d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0c:	b500      	push	{lr}
 8002d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d12:	ee07 1a10 	vmov	s14, r1
 8002d16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d1a:	ed2d 8b02 	vpush	{d8}
 8002d1e:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8002d22:	b085      	sub	sp, #20
 8002d24:	eeb0 0a68 	vmov.f32	s0, s17
 8002d28:	f000 f83e 	bl	8002da8 <cosf>
 8002d2c:	eeb0 8a40 	vmov.f32	s16, s0
 8002d30:	eeb0 0a68 	vmov.f32	s0, s17
 8002d34:	f000 f87c 	bl	8002e30 <sinf>
 8002d38:	eef0 0a40 	vmov.f32	s1, s0
 8002d3c:	eeb0 0a48 	vmov.f32	s0, s16
 8002d40:	b005      	add	sp, #20
 8002d42:	ecbd 8b02 	vpop	{d8}
 8002d46:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d4a:	bf00      	nop
 8002d4c:	c0c90fdb 	.word	0xc0c90fdb

08002d50 <memset>:
 8002d50:	4402      	add	r2, r0
 8002d52:	4603      	mov	r3, r0
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d100      	bne.n	8002d5a <memset+0xa>
 8002d58:	4770      	bx	lr
 8002d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5e:	e7f9      	b.n	8002d54 <memset+0x4>

08002d60 <__libc_init_array>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	4d0d      	ldr	r5, [pc, #52]	@ (8002d98 <__libc_init_array+0x38>)
 8002d64:	4c0d      	ldr	r4, [pc, #52]	@ (8002d9c <__libc_init_array+0x3c>)
 8002d66:	1b64      	subs	r4, r4, r5
 8002d68:	10a4      	asrs	r4, r4, #2
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	42a6      	cmp	r6, r4
 8002d6e:	d109      	bne.n	8002d84 <__libc_init_array+0x24>
 8002d70:	4d0b      	ldr	r5, [pc, #44]	@ (8002da0 <__libc_init_array+0x40>)
 8002d72:	4c0c      	ldr	r4, [pc, #48]	@ (8002da4 <__libc_init_array+0x44>)
 8002d74:	f000 fd8c 	bl	8003890 <_init>
 8002d78:	1b64      	subs	r4, r4, r5
 8002d7a:	10a4      	asrs	r4, r4, #2
 8002d7c:	2600      	movs	r6, #0
 8002d7e:	42a6      	cmp	r6, r4
 8002d80:	d105      	bne.n	8002d8e <__libc_init_array+0x2e>
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
 8002d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d88:	4798      	blx	r3
 8002d8a:	3601      	adds	r6, #1
 8002d8c:	e7ee      	b.n	8002d6c <__libc_init_array+0xc>
 8002d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d92:	4798      	blx	r3
 8002d94:	3601      	adds	r6, #1
 8002d96:	e7f2      	b.n	8002d7e <__libc_init_array+0x1e>
 8002d98:	08003ca8 	.word	0x08003ca8
 8002d9c:	08003ca8 	.word	0x08003ca8
 8002da0:	08003ca8 	.word	0x08003ca8
 8002da4:	08003cac 	.word	0x08003cac

08002da8 <cosf>:
 8002da8:	ee10 3a10 	vmov	r3, s0
 8002dac:	b507      	push	{r0, r1, r2, lr}
 8002dae:	4a1e      	ldr	r2, [pc, #120]	@ (8002e28 <cosf+0x80>)
 8002db0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d806      	bhi.n	8002dc6 <cosf+0x1e>
 8002db8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8002e2c <cosf+0x84>
 8002dbc:	b003      	add	sp, #12
 8002dbe:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dc2:	f000 b87b 	b.w	8002ebc <__kernel_cosf>
 8002dc6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8002dca:	d304      	bcc.n	8002dd6 <cosf+0x2e>
 8002dcc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002dd0:	b003      	add	sp, #12
 8002dd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dd6:	4668      	mov	r0, sp
 8002dd8:	f000 f910 	bl	8002ffc <__ieee754_rem_pio2f>
 8002ddc:	f000 0003 	and.w	r0, r0, #3
 8002de0:	2801      	cmp	r0, #1
 8002de2:	d009      	beq.n	8002df8 <cosf+0x50>
 8002de4:	2802      	cmp	r0, #2
 8002de6:	d010      	beq.n	8002e0a <cosf+0x62>
 8002de8:	b9b0      	cbnz	r0, 8002e18 <cosf+0x70>
 8002dea:	eddd 0a01 	vldr	s1, [sp, #4]
 8002dee:	ed9d 0a00 	vldr	s0, [sp]
 8002df2:	f000 f863 	bl	8002ebc <__kernel_cosf>
 8002df6:	e7eb      	b.n	8002dd0 <cosf+0x28>
 8002df8:	eddd 0a01 	vldr	s1, [sp, #4]
 8002dfc:	ed9d 0a00 	vldr	s0, [sp]
 8002e00:	f000 f8b4 	bl	8002f6c <__kernel_sinf>
 8002e04:	eeb1 0a40 	vneg.f32	s0, s0
 8002e08:	e7e2      	b.n	8002dd0 <cosf+0x28>
 8002e0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8002e0e:	ed9d 0a00 	vldr	s0, [sp]
 8002e12:	f000 f853 	bl	8002ebc <__kernel_cosf>
 8002e16:	e7f5      	b.n	8002e04 <cosf+0x5c>
 8002e18:	eddd 0a01 	vldr	s1, [sp, #4]
 8002e1c:	ed9d 0a00 	vldr	s0, [sp]
 8002e20:	2001      	movs	r0, #1
 8002e22:	f000 f8a3 	bl	8002f6c <__kernel_sinf>
 8002e26:	e7d3      	b.n	8002dd0 <cosf+0x28>
 8002e28:	3f490fd8 	.word	0x3f490fd8
 8002e2c:	00000000 	.word	0x00000000

08002e30 <sinf>:
 8002e30:	ee10 3a10 	vmov	r3, s0
 8002e34:	b507      	push	{r0, r1, r2, lr}
 8002e36:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb4 <sinf+0x84>)
 8002e38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d807      	bhi.n	8002e50 <sinf+0x20>
 8002e40:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8002eb8 <sinf+0x88>
 8002e44:	2000      	movs	r0, #0
 8002e46:	b003      	add	sp, #12
 8002e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e4c:	f000 b88e 	b.w	8002f6c <__kernel_sinf>
 8002e50:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8002e54:	d304      	bcc.n	8002e60 <sinf+0x30>
 8002e56:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002e5a:	b003      	add	sp, #12
 8002e5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e60:	4668      	mov	r0, sp
 8002e62:	f000 f8cb 	bl	8002ffc <__ieee754_rem_pio2f>
 8002e66:	f000 0003 	and.w	r0, r0, #3
 8002e6a:	2801      	cmp	r0, #1
 8002e6c:	d00a      	beq.n	8002e84 <sinf+0x54>
 8002e6e:	2802      	cmp	r0, #2
 8002e70:	d00f      	beq.n	8002e92 <sinf+0x62>
 8002e72:	b9c0      	cbnz	r0, 8002ea6 <sinf+0x76>
 8002e74:	eddd 0a01 	vldr	s1, [sp, #4]
 8002e78:	ed9d 0a00 	vldr	s0, [sp]
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f000 f875 	bl	8002f6c <__kernel_sinf>
 8002e82:	e7ea      	b.n	8002e5a <sinf+0x2a>
 8002e84:	eddd 0a01 	vldr	s1, [sp, #4]
 8002e88:	ed9d 0a00 	vldr	s0, [sp]
 8002e8c:	f000 f816 	bl	8002ebc <__kernel_cosf>
 8002e90:	e7e3      	b.n	8002e5a <sinf+0x2a>
 8002e92:	eddd 0a01 	vldr	s1, [sp, #4]
 8002e96:	ed9d 0a00 	vldr	s0, [sp]
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f000 f866 	bl	8002f6c <__kernel_sinf>
 8002ea0:	eeb1 0a40 	vneg.f32	s0, s0
 8002ea4:	e7d9      	b.n	8002e5a <sinf+0x2a>
 8002ea6:	eddd 0a01 	vldr	s1, [sp, #4]
 8002eaa:	ed9d 0a00 	vldr	s0, [sp]
 8002eae:	f000 f805 	bl	8002ebc <__kernel_cosf>
 8002eb2:	e7f5      	b.n	8002ea0 <sinf+0x70>
 8002eb4:	3f490fd8 	.word	0x3f490fd8
 8002eb8:	00000000 	.word	0x00000000

08002ebc <__kernel_cosf>:
 8002ebc:	ee10 3a10 	vmov	r3, s0
 8002ec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ec4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8002ec8:	eef0 6a40 	vmov.f32	s13, s0
 8002ecc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ed0:	d204      	bcs.n	8002edc <__kernel_cosf+0x20>
 8002ed2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8002ed6:	ee17 2a90 	vmov	r2, s15
 8002eda:	b342      	cbz	r2, 8002f2e <__kernel_cosf+0x72>
 8002edc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8002ee0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8002f4c <__kernel_cosf+0x90>
 8002ee4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8002f50 <__kernel_cosf+0x94>
 8002ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f54 <__kernel_cosf+0x98>)
 8002eea:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002f58 <__kernel_cosf+0x9c>
 8002ef4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002ef8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8002f5c <__kernel_cosf+0xa0>
 8002efc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002f00:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8002f60 <__kernel_cosf+0xa4>
 8002f04:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002f08:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8002f64 <__kernel_cosf+0xa8>
 8002f0c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002f10:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8002f14:	ee26 6a07 	vmul.f32	s12, s12, s14
 8002f18:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002f1c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8002f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f24:	d804      	bhi.n	8002f30 <__kernel_cosf+0x74>
 8002f26:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002f2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002f2e:	4770      	bx	lr
 8002f30:	4a0d      	ldr	r2, [pc, #52]	@ (8002f68 <__kernel_cosf+0xac>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	bf9a      	itte	ls
 8002f36:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8002f3a:	ee07 3a10 	vmovls	s14, r3
 8002f3e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8002f42:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002f46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f4a:	e7ec      	b.n	8002f26 <__kernel_cosf+0x6a>
 8002f4c:	ad47d74e 	.word	0xad47d74e
 8002f50:	310f74f6 	.word	0x310f74f6
 8002f54:	3e999999 	.word	0x3e999999
 8002f58:	b493f27c 	.word	0xb493f27c
 8002f5c:	37d00d01 	.word	0x37d00d01
 8002f60:	bab60b61 	.word	0xbab60b61
 8002f64:	3d2aaaab 	.word	0x3d2aaaab
 8002f68:	3f480000 	.word	0x3f480000

08002f6c <__kernel_sinf>:
 8002f6c:	ee10 3a10 	vmov	r3, s0
 8002f70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f74:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8002f78:	d204      	bcs.n	8002f84 <__kernel_sinf+0x18>
 8002f7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f7e:	ee17 3a90 	vmov	r3, s15
 8002f82:	b35b      	cbz	r3, 8002fdc <__kernel_sinf+0x70>
 8002f84:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002f88:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8002fe0 <__kernel_sinf+0x74>
 8002f8c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8002fe4 <__kernel_sinf+0x78>
 8002f90:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002f94:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8002fe8 <__kernel_sinf+0x7c>
 8002f98:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002f9c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8002fec <__kernel_sinf+0x80>
 8002fa0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002fa4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8002ff0 <__kernel_sinf+0x84>
 8002fa8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8002fac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002fb0:	b930      	cbnz	r0, 8002fc0 <__kernel_sinf+0x54>
 8002fb2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8002ff4 <__kernel_sinf+0x88>
 8002fb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002fba:	eea6 0a26 	vfma.f32	s0, s12, s13
 8002fbe:	4770      	bx	lr
 8002fc0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8002fc4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8002fc8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8002fcc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8002fd0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8002ff8 <__kernel_sinf+0x8c>
 8002fd4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8002fd8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	2f2ec9d3 	.word	0x2f2ec9d3
 8002fe4:	b2d72f34 	.word	0xb2d72f34
 8002fe8:	3638ef1b 	.word	0x3638ef1b
 8002fec:	b9500d01 	.word	0xb9500d01
 8002ff0:	3c088889 	.word	0x3c088889
 8002ff4:	be2aaaab 	.word	0xbe2aaaab
 8002ff8:	3e2aaaab 	.word	0x3e2aaaab

08002ffc <__ieee754_rem_pio2f>:
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffe:	ee10 6a10 	vmov	r6, s0
 8003002:	4b88      	ldr	r3, [pc, #544]	@ (8003224 <__ieee754_rem_pio2f+0x228>)
 8003004:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8003008:	429d      	cmp	r5, r3
 800300a:	b087      	sub	sp, #28
 800300c:	4604      	mov	r4, r0
 800300e:	d805      	bhi.n	800301c <__ieee754_rem_pio2f+0x20>
 8003010:	2300      	movs	r3, #0
 8003012:	ed80 0a00 	vstr	s0, [r0]
 8003016:	6043      	str	r3, [r0, #4]
 8003018:	2000      	movs	r0, #0
 800301a:	e022      	b.n	8003062 <__ieee754_rem_pio2f+0x66>
 800301c:	4b82      	ldr	r3, [pc, #520]	@ (8003228 <__ieee754_rem_pio2f+0x22c>)
 800301e:	429d      	cmp	r5, r3
 8003020:	d83a      	bhi.n	8003098 <__ieee754_rem_pio2f+0x9c>
 8003022:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003026:	2e00      	cmp	r6, #0
 8003028:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800322c <__ieee754_rem_pio2f+0x230>
 800302c:	4a80      	ldr	r2, [pc, #512]	@ (8003230 <__ieee754_rem_pio2f+0x234>)
 800302e:	f023 030f 	bic.w	r3, r3, #15
 8003032:	dd18      	ble.n	8003066 <__ieee754_rem_pio2f+0x6a>
 8003034:	4293      	cmp	r3, r2
 8003036:	ee70 7a47 	vsub.f32	s15, s0, s14
 800303a:	bf09      	itett	eq
 800303c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8003234 <__ieee754_rem_pio2f+0x238>
 8003040:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8003238 <__ieee754_rem_pio2f+0x23c>
 8003044:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800323c <__ieee754_rem_pio2f+0x240>
 8003048:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800304c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003050:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003054:	ed80 7a00 	vstr	s14, [r0]
 8003058:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800305c:	edc0 7a01 	vstr	s15, [r0, #4]
 8003060:	2001      	movs	r0, #1
 8003062:	b007      	add	sp, #28
 8003064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003066:	4293      	cmp	r3, r2
 8003068:	ee70 7a07 	vadd.f32	s15, s0, s14
 800306c:	bf09      	itett	eq
 800306e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8003234 <__ieee754_rem_pio2f+0x238>
 8003072:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8003238 <__ieee754_rem_pio2f+0x23c>
 8003076:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800323c <__ieee754_rem_pio2f+0x240>
 800307a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800307e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003086:	ed80 7a00 	vstr	s14, [r0]
 800308a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308e:	edc0 7a01 	vstr	s15, [r0, #4]
 8003092:	f04f 30ff 	mov.w	r0, #4294967295
 8003096:	e7e4      	b.n	8003062 <__ieee754_rem_pio2f+0x66>
 8003098:	4b69      	ldr	r3, [pc, #420]	@ (8003240 <__ieee754_rem_pio2f+0x244>)
 800309a:	429d      	cmp	r5, r3
 800309c:	d873      	bhi.n	8003186 <__ieee754_rem_pio2f+0x18a>
 800309e:	f000 f8dd 	bl	800325c <fabsf>
 80030a2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003244 <__ieee754_rem_pio2f+0x248>
 80030a6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80030aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80030ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030b6:	ee17 0a90 	vmov	r0, s15
 80030ba:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800322c <__ieee754_rem_pio2f+0x230>
 80030be:	eea7 0a67 	vfms.f32	s0, s14, s15
 80030c2:	281f      	cmp	r0, #31
 80030c4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8003238 <__ieee754_rem_pio2f+0x23c>
 80030c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030cc:	eeb1 6a47 	vneg.f32	s12, s14
 80030d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80030d4:	ee16 1a90 	vmov	r1, s13
 80030d8:	dc09      	bgt.n	80030ee <__ieee754_rem_pio2f+0xf2>
 80030da:	4a5b      	ldr	r2, [pc, #364]	@ (8003248 <__ieee754_rem_pio2f+0x24c>)
 80030dc:	1e47      	subs	r7, r0, #1
 80030de:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80030e2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80030e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d107      	bne.n	80030fe <__ieee754_rem_pio2f+0x102>
 80030ee:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80030f2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80030f6:	2a08      	cmp	r2, #8
 80030f8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80030fc:	dc14      	bgt.n	8003128 <__ieee754_rem_pio2f+0x12c>
 80030fe:	6021      	str	r1, [r4, #0]
 8003100:	ed94 7a00 	vldr	s14, [r4]
 8003104:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003108:	2e00      	cmp	r6, #0
 800310a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800310e:	ed84 0a01 	vstr	s0, [r4, #4]
 8003112:	daa6      	bge.n	8003062 <__ieee754_rem_pio2f+0x66>
 8003114:	eeb1 7a47 	vneg.f32	s14, s14
 8003118:	eeb1 0a40 	vneg.f32	s0, s0
 800311c:	ed84 7a00 	vstr	s14, [r4]
 8003120:	ed84 0a01 	vstr	s0, [r4, #4]
 8003124:	4240      	negs	r0, r0
 8003126:	e79c      	b.n	8003062 <__ieee754_rem_pio2f+0x66>
 8003128:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8003234 <__ieee754_rem_pio2f+0x238>
 800312c:	eef0 6a40 	vmov.f32	s13, s0
 8003130:	eee6 6a25 	vfma.f32	s13, s12, s11
 8003134:	ee70 7a66 	vsub.f32	s15, s0, s13
 8003138:	eee6 7a25 	vfma.f32	s15, s12, s11
 800313c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800323c <__ieee754_rem_pio2f+0x240>
 8003140:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003144:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8003148:	ee15 2a90 	vmov	r2, s11
 800314c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003150:	1a5b      	subs	r3, r3, r1
 8003152:	2b19      	cmp	r3, #25
 8003154:	dc04      	bgt.n	8003160 <__ieee754_rem_pio2f+0x164>
 8003156:	edc4 5a00 	vstr	s11, [r4]
 800315a:	eeb0 0a66 	vmov.f32	s0, s13
 800315e:	e7cf      	b.n	8003100 <__ieee754_rem_pio2f+0x104>
 8003160:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800324c <__ieee754_rem_pio2f+0x250>
 8003164:	eeb0 0a66 	vmov.f32	s0, s13
 8003168:	eea6 0a25 	vfma.f32	s0, s12, s11
 800316c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003170:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8003250 <__ieee754_rem_pio2f+0x254>
 8003174:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003178:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800317c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003180:	ed84 7a00 	vstr	s14, [r4]
 8003184:	e7bc      	b.n	8003100 <__ieee754_rem_pio2f+0x104>
 8003186:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800318a:	d306      	bcc.n	800319a <__ieee754_rem_pio2f+0x19e>
 800318c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003190:	edc0 7a01 	vstr	s15, [r0, #4]
 8003194:	edc0 7a00 	vstr	s15, [r0]
 8003198:	e73e      	b.n	8003018 <__ieee754_rem_pio2f+0x1c>
 800319a:	15ea      	asrs	r2, r5, #23
 800319c:	3a86      	subs	r2, #134	@ 0x86
 800319e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80031aa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003254 <__ieee754_rem_pio2f+0x258>
 80031ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80031b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031b6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80031ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80031c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80031c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031ca:	ed8d 7a04 	vstr	s14, [sp, #16]
 80031ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	edcd 7a05 	vstr	s15, [sp, #20]
 80031de:	d11e      	bne.n	800321e <__ieee754_rem_pio2f+0x222>
 80031e0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80031e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e8:	bf0c      	ite	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	2302      	movne	r3, #2
 80031ee:	491a      	ldr	r1, [pc, #104]	@ (8003258 <__ieee754_rem_pio2f+0x25c>)
 80031f0:	9101      	str	r1, [sp, #4]
 80031f2:	2102      	movs	r1, #2
 80031f4:	9100      	str	r1, [sp, #0]
 80031f6:	a803      	add	r0, sp, #12
 80031f8:	4621      	mov	r1, r4
 80031fa:	f000 f837 	bl	800326c <__kernel_rem_pio2f>
 80031fe:	2e00      	cmp	r6, #0
 8003200:	f6bf af2f 	bge.w	8003062 <__ieee754_rem_pio2f+0x66>
 8003204:	edd4 7a00 	vldr	s15, [r4]
 8003208:	eef1 7a67 	vneg.f32	s15, s15
 800320c:	edc4 7a00 	vstr	s15, [r4]
 8003210:	edd4 7a01 	vldr	s15, [r4, #4]
 8003214:	eef1 7a67 	vneg.f32	s15, s15
 8003218:	edc4 7a01 	vstr	s15, [r4, #4]
 800321c:	e782      	b.n	8003124 <__ieee754_rem_pio2f+0x128>
 800321e:	2303      	movs	r3, #3
 8003220:	e7e5      	b.n	80031ee <__ieee754_rem_pio2f+0x1f2>
 8003222:	bf00      	nop
 8003224:	3f490fd8 	.word	0x3f490fd8
 8003228:	4016cbe3 	.word	0x4016cbe3
 800322c:	3fc90f80 	.word	0x3fc90f80
 8003230:	3fc90fd0 	.word	0x3fc90fd0
 8003234:	37354400 	.word	0x37354400
 8003238:	37354443 	.word	0x37354443
 800323c:	2e85a308 	.word	0x2e85a308
 8003240:	43490f80 	.word	0x43490f80
 8003244:	3f22f984 	.word	0x3f22f984
 8003248:	080038d8 	.word	0x080038d8
 800324c:	2e85a300 	.word	0x2e85a300
 8003250:	248d3132 	.word	0x248d3132
 8003254:	43800000 	.word	0x43800000
 8003258:	08003958 	.word	0x08003958

0800325c <fabsf>:
 800325c:	ee10 3a10 	vmov	r3, s0
 8003260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003264:	ee00 3a10 	vmov	s0, r3
 8003268:	4770      	bx	lr
	...

0800326c <__kernel_rem_pio2f>:
 800326c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003270:	ed2d 8b04 	vpush	{d8-d9}
 8003274:	b0d9      	sub	sp, #356	@ 0x164
 8003276:	4690      	mov	r8, r2
 8003278:	9001      	str	r0, [sp, #4]
 800327a:	4ab6      	ldr	r2, [pc, #728]	@ (8003554 <__kernel_rem_pio2f+0x2e8>)
 800327c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800327e:	f118 0f04 	cmn.w	r8, #4
 8003282:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8003286:	460f      	mov	r7, r1
 8003288:	f103 3bff 	add.w	fp, r3, #4294967295
 800328c:	db26      	blt.n	80032dc <__kernel_rem_pio2f+0x70>
 800328e:	f1b8 0203 	subs.w	r2, r8, #3
 8003292:	bf48      	it	mi
 8003294:	f108 0204 	addmi.w	r2, r8, #4
 8003298:	10d2      	asrs	r2, r2, #3
 800329a:	1c55      	adds	r5, r2, #1
 800329c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800329e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8003564 <__kernel_rem_pio2f+0x2f8>
 80032a2:	00e8      	lsls	r0, r5, #3
 80032a4:	eba2 060b 	sub.w	r6, r2, fp
 80032a8:	9002      	str	r0, [sp, #8]
 80032aa:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80032ae:	eb0a 0c0b 	add.w	ip, sl, fp
 80032b2:	ac1c      	add	r4, sp, #112	@ 0x70
 80032b4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80032b8:	2000      	movs	r0, #0
 80032ba:	4560      	cmp	r0, ip
 80032bc:	dd10      	ble.n	80032e0 <__kernel_rem_pio2f+0x74>
 80032be:	a91c      	add	r1, sp, #112	@ 0x70
 80032c0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80032c4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80032c8:	2600      	movs	r6, #0
 80032ca:	4556      	cmp	r6, sl
 80032cc:	dc24      	bgt.n	8003318 <__kernel_rem_pio2f+0xac>
 80032ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80032d2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8003564 <__kernel_rem_pio2f+0x2f8>
 80032d6:	4684      	mov	ip, r0
 80032d8:	2400      	movs	r4, #0
 80032da:	e016      	b.n	800330a <__kernel_rem_pio2f+0x9e>
 80032dc:	2200      	movs	r2, #0
 80032de:	e7dc      	b.n	800329a <__kernel_rem_pio2f+0x2e>
 80032e0:	42c6      	cmn	r6, r0
 80032e2:	bf5d      	ittte	pl
 80032e4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80032e8:	ee07 1a90 	vmovpl	s15, r1
 80032ec:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80032f0:	eef0 7a47 	vmovmi.f32	s15, s14
 80032f4:	ece4 7a01 	vstmia	r4!, {s15}
 80032f8:	3001      	adds	r0, #1
 80032fa:	e7de      	b.n	80032ba <__kernel_rem_pio2f+0x4e>
 80032fc:	ecfe 6a01 	vldmia	lr!, {s13}
 8003300:	ed3c 7a01 	vldmdb	ip!, {s14}
 8003304:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003308:	3401      	adds	r4, #1
 800330a:	455c      	cmp	r4, fp
 800330c:	ddf6      	ble.n	80032fc <__kernel_rem_pio2f+0x90>
 800330e:	ece9 7a01 	vstmia	r9!, {s15}
 8003312:	3601      	adds	r6, #1
 8003314:	3004      	adds	r0, #4
 8003316:	e7d8      	b.n	80032ca <__kernel_rem_pio2f+0x5e>
 8003318:	a908      	add	r1, sp, #32
 800331a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800331e:	9104      	str	r1, [sp, #16]
 8003320:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8003322:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8003560 <__kernel_rem_pio2f+0x2f4>
 8003326:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800355c <__kernel_rem_pio2f+0x2f0>
 800332a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800332e:	9203      	str	r2, [sp, #12]
 8003330:	4654      	mov	r4, sl
 8003332:	00a2      	lsls	r2, r4, #2
 8003334:	9205      	str	r2, [sp, #20]
 8003336:	aa58      	add	r2, sp, #352	@ 0x160
 8003338:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800333c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8003340:	a944      	add	r1, sp, #272	@ 0x110
 8003342:	aa08      	add	r2, sp, #32
 8003344:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003348:	4694      	mov	ip, r2
 800334a:	4626      	mov	r6, r4
 800334c:	2e00      	cmp	r6, #0
 800334e:	dc4c      	bgt.n	80033ea <__kernel_rem_pio2f+0x17e>
 8003350:	4628      	mov	r0, r5
 8003352:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003356:	f000 f9f1 	bl	800373c <scalbnf>
 800335a:	eeb0 8a40 	vmov.f32	s16, s0
 800335e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8003362:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003366:	f000 fa4f 	bl	8003808 <floorf>
 800336a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800336e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003372:	2d00      	cmp	r5, #0
 8003374:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003378:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800337c:	ee17 9a90 	vmov	r9, s15
 8003380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003384:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003388:	dd41      	ble.n	800340e <__kernel_rem_pio2f+0x1a2>
 800338a:	f104 3cff 	add.w	ip, r4, #4294967295
 800338e:	a908      	add	r1, sp, #32
 8003390:	f1c5 0e08 	rsb	lr, r5, #8
 8003394:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8003398:	fa46 f00e 	asr.w	r0, r6, lr
 800339c:	4481      	add	r9, r0
 800339e:	fa00 f00e 	lsl.w	r0, r0, lr
 80033a2:	1a36      	subs	r6, r6, r0
 80033a4:	f1c5 0007 	rsb	r0, r5, #7
 80033a8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80033ac:	4106      	asrs	r6, r0
 80033ae:	2e00      	cmp	r6, #0
 80033b0:	dd3c      	ble.n	800342c <__kernel_rem_pio2f+0x1c0>
 80033b2:	f04f 0e00 	mov.w	lr, #0
 80033b6:	f109 0901 	add.w	r9, r9, #1
 80033ba:	4670      	mov	r0, lr
 80033bc:	4574      	cmp	r4, lr
 80033be:	dc68      	bgt.n	8003492 <__kernel_rem_pio2f+0x226>
 80033c0:	2d00      	cmp	r5, #0
 80033c2:	dd03      	ble.n	80033cc <__kernel_rem_pio2f+0x160>
 80033c4:	2d01      	cmp	r5, #1
 80033c6:	d074      	beq.n	80034b2 <__kernel_rem_pio2f+0x246>
 80033c8:	2d02      	cmp	r5, #2
 80033ca:	d07d      	beq.n	80034c8 <__kernel_rem_pio2f+0x25c>
 80033cc:	2e02      	cmp	r6, #2
 80033ce:	d12d      	bne.n	800342c <__kernel_rem_pio2f+0x1c0>
 80033d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80033d4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80033d8:	b340      	cbz	r0, 800342c <__kernel_rem_pio2f+0x1c0>
 80033da:	4628      	mov	r0, r5
 80033dc:	9306      	str	r3, [sp, #24]
 80033de:	f000 f9ad 	bl	800373c <scalbnf>
 80033e2:	9b06      	ldr	r3, [sp, #24]
 80033e4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80033e8:	e020      	b.n	800342c <__kernel_rem_pio2f+0x1c0>
 80033ea:	ee60 7a28 	vmul.f32	s15, s0, s17
 80033ee:	3e01      	subs	r6, #1
 80033f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033f8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80033fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003400:	ecac 0a01 	vstmia	ip!, {s0}
 8003404:	ed30 0a01 	vldmdb	r0!, {s0}
 8003408:	ee37 0a80 	vadd.f32	s0, s15, s0
 800340c:	e79e      	b.n	800334c <__kernel_rem_pio2f+0xe0>
 800340e:	d105      	bne.n	800341c <__kernel_rem_pio2f+0x1b0>
 8003410:	1e60      	subs	r0, r4, #1
 8003412:	a908      	add	r1, sp, #32
 8003414:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8003418:	11f6      	asrs	r6, r6, #7
 800341a:	e7c8      	b.n	80033ae <__kernel_rem_pio2f+0x142>
 800341c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003420:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003428:	da31      	bge.n	800348e <__kernel_rem_pio2f+0x222>
 800342a:	2600      	movs	r6, #0
 800342c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003434:	f040 8098 	bne.w	8003568 <__kernel_rem_pio2f+0x2fc>
 8003438:	1e60      	subs	r0, r4, #1
 800343a:	2200      	movs	r2, #0
 800343c:	4550      	cmp	r0, sl
 800343e:	da4b      	bge.n	80034d8 <__kernel_rem_pio2f+0x26c>
 8003440:	2a00      	cmp	r2, #0
 8003442:	d065      	beq.n	8003510 <__kernel_rem_pio2f+0x2a4>
 8003444:	3c01      	subs	r4, #1
 8003446:	ab08      	add	r3, sp, #32
 8003448:	3d08      	subs	r5, #8
 800344a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f8      	beq.n	8003444 <__kernel_rem_pio2f+0x1d8>
 8003452:	4628      	mov	r0, r5
 8003454:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003458:	f000 f970 	bl	800373c <scalbnf>
 800345c:	1c63      	adds	r3, r4, #1
 800345e:	aa44      	add	r2, sp, #272	@ 0x110
 8003460:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003560 <__kernel_rem_pio2f+0x2f4>
 8003464:	0099      	lsls	r1, r3, #2
 8003466:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800346a:	4623      	mov	r3, r4
 800346c:	2b00      	cmp	r3, #0
 800346e:	f280 80a9 	bge.w	80035c4 <__kernel_rem_pio2f+0x358>
 8003472:	4623      	mov	r3, r4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f2c0 80c7 	blt.w	8003608 <__kernel_rem_pio2f+0x39c>
 800347a:	aa44      	add	r2, sp, #272	@ 0x110
 800347c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8003480:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8003558 <__kernel_rem_pio2f+0x2ec>
 8003484:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8003564 <__kernel_rem_pio2f+0x2f8>
 8003488:	2000      	movs	r0, #0
 800348a:	1ae2      	subs	r2, r4, r3
 800348c:	e0b1      	b.n	80035f2 <__kernel_rem_pio2f+0x386>
 800348e:	2602      	movs	r6, #2
 8003490:	e78f      	b.n	80033b2 <__kernel_rem_pio2f+0x146>
 8003492:	f852 1b04 	ldr.w	r1, [r2], #4
 8003496:	b948      	cbnz	r0, 80034ac <__kernel_rem_pio2f+0x240>
 8003498:	b121      	cbz	r1, 80034a4 <__kernel_rem_pio2f+0x238>
 800349a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800349e:	f842 1c04 	str.w	r1, [r2, #-4]
 80034a2:	2101      	movs	r1, #1
 80034a4:	f10e 0e01 	add.w	lr, lr, #1
 80034a8:	4608      	mov	r0, r1
 80034aa:	e787      	b.n	80033bc <__kernel_rem_pio2f+0x150>
 80034ac:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80034b0:	e7f5      	b.n	800349e <__kernel_rem_pio2f+0x232>
 80034b2:	f104 3cff 	add.w	ip, r4, #4294967295
 80034b6:	aa08      	add	r2, sp, #32
 80034b8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80034bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034c0:	a908      	add	r1, sp, #32
 80034c2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80034c6:	e781      	b.n	80033cc <__kernel_rem_pio2f+0x160>
 80034c8:	f104 3cff 	add.w	ip, r4, #4294967295
 80034cc:	aa08      	add	r2, sp, #32
 80034ce:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80034d2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80034d6:	e7f3      	b.n	80034c0 <__kernel_rem_pio2f+0x254>
 80034d8:	a908      	add	r1, sp, #32
 80034da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80034de:	3801      	subs	r0, #1
 80034e0:	430a      	orrs	r2, r1
 80034e2:	e7ab      	b.n	800343c <__kernel_rem_pio2f+0x1d0>
 80034e4:	3201      	adds	r2, #1
 80034e6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80034ea:	2e00      	cmp	r6, #0
 80034ec:	d0fa      	beq.n	80034e4 <__kernel_rem_pio2f+0x278>
 80034ee:	9905      	ldr	r1, [sp, #20]
 80034f0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80034f4:	eb0d 0001 	add.w	r0, sp, r1
 80034f8:	18e6      	adds	r6, r4, r3
 80034fa:	a91c      	add	r1, sp, #112	@ 0x70
 80034fc:	f104 0c01 	add.w	ip, r4, #1
 8003500:	384c      	subs	r0, #76	@ 0x4c
 8003502:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8003506:	4422      	add	r2, r4
 8003508:	4562      	cmp	r2, ip
 800350a:	da04      	bge.n	8003516 <__kernel_rem_pio2f+0x2aa>
 800350c:	4614      	mov	r4, r2
 800350e:	e710      	b.n	8003332 <__kernel_rem_pio2f+0xc6>
 8003510:	9804      	ldr	r0, [sp, #16]
 8003512:	2201      	movs	r2, #1
 8003514:	e7e7      	b.n	80034e6 <__kernel_rem_pio2f+0x27a>
 8003516:	9903      	ldr	r1, [sp, #12]
 8003518:	f8dd e004 	ldr.w	lr, [sp, #4]
 800351c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8003520:	9105      	str	r1, [sp, #20]
 8003522:	ee07 1a90 	vmov	s15, r1
 8003526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800352a:	2400      	movs	r4, #0
 800352c:	ece6 7a01 	vstmia	r6!, {s15}
 8003530:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003564 <__kernel_rem_pio2f+0x2f8>
 8003534:	46b1      	mov	r9, r6
 8003536:	455c      	cmp	r4, fp
 8003538:	dd04      	ble.n	8003544 <__kernel_rem_pio2f+0x2d8>
 800353a:	ece0 7a01 	vstmia	r0!, {s15}
 800353e:	f10c 0c01 	add.w	ip, ip, #1
 8003542:	e7e1      	b.n	8003508 <__kernel_rem_pio2f+0x29c>
 8003544:	ecfe 6a01 	vldmia	lr!, {s13}
 8003548:	ed39 7a01 	vldmdb	r9!, {s14}
 800354c:	3401      	adds	r4, #1
 800354e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003552:	e7f0      	b.n	8003536 <__kernel_rem_pio2f+0x2ca>
 8003554:	08003c9c 	.word	0x08003c9c
 8003558:	08003c70 	.word	0x08003c70
 800355c:	43800000 	.word	0x43800000
 8003560:	3b800000 	.word	0x3b800000
 8003564:	00000000 	.word	0x00000000
 8003568:	9b02      	ldr	r3, [sp, #8]
 800356a:	eeb0 0a48 	vmov.f32	s0, s16
 800356e:	eba3 0008 	sub.w	r0, r3, r8
 8003572:	f000 f8e3 	bl	800373c <scalbnf>
 8003576:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800355c <__kernel_rem_pio2f+0x2f0>
 800357a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	db19      	blt.n	80035b8 <__kernel_rem_pio2f+0x34c>
 8003584:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8003560 <__kernel_rem_pio2f+0x2f4>
 8003588:	ee60 7a27 	vmul.f32	s15, s0, s15
 800358c:	aa08      	add	r2, sp, #32
 800358e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003592:	3508      	adds	r5, #8
 8003594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003598:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800359c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80035a4:	ee10 3a10 	vmov	r3, s0
 80035a8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80035ac:	ee17 3a90 	vmov	r3, s15
 80035b0:	3401      	adds	r4, #1
 80035b2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80035b6:	e74c      	b.n	8003452 <__kernel_rem_pio2f+0x1e6>
 80035b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80035bc:	aa08      	add	r2, sp, #32
 80035be:	ee10 3a10 	vmov	r3, s0
 80035c2:	e7f6      	b.n	80035b2 <__kernel_rem_pio2f+0x346>
 80035c4:	a808      	add	r0, sp, #32
 80035c6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80035ca:	9001      	str	r0, [sp, #4]
 80035cc:	ee07 0a90 	vmov	s15, r0
 80035d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d4:	3b01      	subs	r3, #1
 80035d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80035da:	ee20 0a07 	vmul.f32	s0, s0, s14
 80035de:	ed62 7a01 	vstmdb	r2!, {s15}
 80035e2:	e743      	b.n	800346c <__kernel_rem_pio2f+0x200>
 80035e4:	ecfc 6a01 	vldmia	ip!, {s13}
 80035e8:	ecb5 7a01 	vldmia	r5!, {s14}
 80035ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80035f0:	3001      	adds	r0, #1
 80035f2:	4550      	cmp	r0, sl
 80035f4:	dc01      	bgt.n	80035fa <__kernel_rem_pio2f+0x38e>
 80035f6:	4290      	cmp	r0, r2
 80035f8:	ddf4      	ble.n	80035e4 <__kernel_rem_pio2f+0x378>
 80035fa:	a858      	add	r0, sp, #352	@ 0x160
 80035fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003600:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8003604:	3b01      	subs	r3, #1
 8003606:	e735      	b.n	8003474 <__kernel_rem_pio2f+0x208>
 8003608:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800360a:	2b02      	cmp	r3, #2
 800360c:	dc09      	bgt.n	8003622 <__kernel_rem_pio2f+0x3b6>
 800360e:	2b00      	cmp	r3, #0
 8003610:	dc27      	bgt.n	8003662 <__kernel_rem_pio2f+0x3f6>
 8003612:	d040      	beq.n	8003696 <__kernel_rem_pio2f+0x42a>
 8003614:	f009 0007 	and.w	r0, r9, #7
 8003618:	b059      	add	sp, #356	@ 0x164
 800361a:	ecbd 8b04 	vpop	{d8-d9}
 800361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003622:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8003624:	2b03      	cmp	r3, #3
 8003626:	d1f5      	bne.n	8003614 <__kernel_rem_pio2f+0x3a8>
 8003628:	aa30      	add	r2, sp, #192	@ 0xc0
 800362a:	1f0b      	subs	r3, r1, #4
 800362c:	4413      	add	r3, r2
 800362e:	461a      	mov	r2, r3
 8003630:	4620      	mov	r0, r4
 8003632:	2800      	cmp	r0, #0
 8003634:	dc50      	bgt.n	80036d8 <__kernel_rem_pio2f+0x46c>
 8003636:	4622      	mov	r2, r4
 8003638:	2a01      	cmp	r2, #1
 800363a:	dc5d      	bgt.n	80036f8 <__kernel_rem_pio2f+0x48c>
 800363c:	ab30      	add	r3, sp, #192	@ 0xc0
 800363e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8003564 <__kernel_rem_pio2f+0x2f8>
 8003642:	440b      	add	r3, r1
 8003644:	2c01      	cmp	r4, #1
 8003646:	dc67      	bgt.n	8003718 <__kernel_rem_pio2f+0x4ac>
 8003648:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800364c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8003650:	2e00      	cmp	r6, #0
 8003652:	d167      	bne.n	8003724 <__kernel_rem_pio2f+0x4b8>
 8003654:	edc7 6a00 	vstr	s13, [r7]
 8003658:	ed87 7a01 	vstr	s14, [r7, #4]
 800365c:	edc7 7a02 	vstr	s15, [r7, #8]
 8003660:	e7d8      	b.n	8003614 <__kernel_rem_pio2f+0x3a8>
 8003662:	ab30      	add	r3, sp, #192	@ 0xc0
 8003664:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8003564 <__kernel_rem_pio2f+0x2f8>
 8003668:	440b      	add	r3, r1
 800366a:	4622      	mov	r2, r4
 800366c:	2a00      	cmp	r2, #0
 800366e:	da24      	bge.n	80036ba <__kernel_rem_pio2f+0x44e>
 8003670:	b34e      	cbz	r6, 80036c6 <__kernel_rem_pio2f+0x45a>
 8003672:	eef1 7a47 	vneg.f32	s15, s14
 8003676:	edc7 7a00 	vstr	s15, [r7]
 800367a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800367e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003682:	aa31      	add	r2, sp, #196	@ 0xc4
 8003684:	2301      	movs	r3, #1
 8003686:	429c      	cmp	r4, r3
 8003688:	da20      	bge.n	80036cc <__kernel_rem_pio2f+0x460>
 800368a:	b10e      	cbz	r6, 8003690 <__kernel_rem_pio2f+0x424>
 800368c:	eef1 7a67 	vneg.f32	s15, s15
 8003690:	edc7 7a01 	vstr	s15, [r7, #4]
 8003694:	e7be      	b.n	8003614 <__kernel_rem_pio2f+0x3a8>
 8003696:	ab30      	add	r3, sp, #192	@ 0xc0
 8003698:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8003564 <__kernel_rem_pio2f+0x2f8>
 800369c:	440b      	add	r3, r1
 800369e:	2c00      	cmp	r4, #0
 80036a0:	da05      	bge.n	80036ae <__kernel_rem_pio2f+0x442>
 80036a2:	b10e      	cbz	r6, 80036a8 <__kernel_rem_pio2f+0x43c>
 80036a4:	eef1 7a67 	vneg.f32	s15, s15
 80036a8:	edc7 7a00 	vstr	s15, [r7]
 80036ac:	e7b2      	b.n	8003614 <__kernel_rem_pio2f+0x3a8>
 80036ae:	ed33 7a01 	vldmdb	r3!, {s14}
 80036b2:	3c01      	subs	r4, #1
 80036b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036b8:	e7f1      	b.n	800369e <__kernel_rem_pio2f+0x432>
 80036ba:	ed73 7a01 	vldmdb	r3!, {s15}
 80036be:	3a01      	subs	r2, #1
 80036c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036c4:	e7d2      	b.n	800366c <__kernel_rem_pio2f+0x400>
 80036c6:	eef0 7a47 	vmov.f32	s15, s14
 80036ca:	e7d4      	b.n	8003676 <__kernel_rem_pio2f+0x40a>
 80036cc:	ecb2 7a01 	vldmia	r2!, {s14}
 80036d0:	3301      	adds	r3, #1
 80036d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036d6:	e7d6      	b.n	8003686 <__kernel_rem_pio2f+0x41a>
 80036d8:	ed72 7a01 	vldmdb	r2!, {s15}
 80036dc:	edd2 6a01 	vldr	s13, [r2, #4]
 80036e0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80036e4:	3801      	subs	r0, #1
 80036e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036ea:	ed82 7a00 	vstr	s14, [r2]
 80036ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f2:	edc2 7a01 	vstr	s15, [r2, #4]
 80036f6:	e79c      	b.n	8003632 <__kernel_rem_pio2f+0x3c6>
 80036f8:	ed73 7a01 	vldmdb	r3!, {s15}
 80036fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8003700:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003704:	3a01      	subs	r2, #1
 8003706:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800370a:	ed83 7a00 	vstr	s14, [r3]
 800370e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003712:	edc3 7a01 	vstr	s15, [r3, #4]
 8003716:	e78f      	b.n	8003638 <__kernel_rem_pio2f+0x3cc>
 8003718:	ed33 7a01 	vldmdb	r3!, {s14}
 800371c:	3c01      	subs	r4, #1
 800371e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003722:	e78f      	b.n	8003644 <__kernel_rem_pio2f+0x3d8>
 8003724:	eef1 6a66 	vneg.f32	s13, s13
 8003728:	eeb1 7a47 	vneg.f32	s14, s14
 800372c:	edc7 6a00 	vstr	s13, [r7]
 8003730:	ed87 7a01 	vstr	s14, [r7, #4]
 8003734:	eef1 7a67 	vneg.f32	s15, s15
 8003738:	e790      	b.n	800365c <__kernel_rem_pio2f+0x3f0>
 800373a:	bf00      	nop

0800373c <scalbnf>:
 800373c:	ee10 3a10 	vmov	r3, s0
 8003740:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8003744:	d02b      	beq.n	800379e <scalbnf+0x62>
 8003746:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800374a:	d302      	bcc.n	8003752 <scalbnf+0x16>
 800374c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003750:	4770      	bx	lr
 8003752:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8003756:	d123      	bne.n	80037a0 <scalbnf+0x64>
 8003758:	4b24      	ldr	r3, [pc, #144]	@ (80037ec <scalbnf+0xb0>)
 800375a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80037f0 <scalbnf+0xb4>
 800375e:	4298      	cmp	r0, r3
 8003760:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003764:	db17      	blt.n	8003796 <scalbnf+0x5a>
 8003766:	ee10 3a10 	vmov	r3, s0
 800376a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800376e:	3a19      	subs	r2, #25
 8003770:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003774:	4288      	cmp	r0, r1
 8003776:	dd15      	ble.n	80037a4 <scalbnf+0x68>
 8003778:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80037f4 <scalbnf+0xb8>
 800377c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80037f8 <scalbnf+0xbc>
 8003780:	ee10 3a10 	vmov	r3, s0
 8003784:	eeb0 7a67 	vmov.f32	s14, s15
 8003788:	2b00      	cmp	r3, #0
 800378a:	bfb8      	it	lt
 800378c:	eef0 7a66 	vmovlt.f32	s15, s13
 8003790:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003794:	4770      	bx	lr
 8003796:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80037fc <scalbnf+0xc0>
 800379a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800379e:	4770      	bx	lr
 80037a0:	0dd2      	lsrs	r2, r2, #23
 80037a2:	e7e5      	b.n	8003770 <scalbnf+0x34>
 80037a4:	4410      	add	r0, r2
 80037a6:	28fe      	cmp	r0, #254	@ 0xfe
 80037a8:	dce6      	bgt.n	8003778 <scalbnf+0x3c>
 80037aa:	2800      	cmp	r0, #0
 80037ac:	dd06      	ble.n	80037bc <scalbnf+0x80>
 80037ae:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80037b2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80037b6:	ee00 3a10 	vmov	s0, r3
 80037ba:	4770      	bx	lr
 80037bc:	f110 0f16 	cmn.w	r0, #22
 80037c0:	da09      	bge.n	80037d6 <scalbnf+0x9a>
 80037c2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80037fc <scalbnf+0xc0>
 80037c6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003800 <scalbnf+0xc4>
 80037ca:	ee10 3a10 	vmov	r3, s0
 80037ce:	eeb0 7a67 	vmov.f32	s14, s15
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	e7d9      	b.n	800378a <scalbnf+0x4e>
 80037d6:	3019      	adds	r0, #25
 80037d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80037dc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80037e0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003804 <scalbnf+0xc8>
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	e7d7      	b.n	800379a <scalbnf+0x5e>
 80037ea:	bf00      	nop
 80037ec:	ffff3cb0 	.word	0xffff3cb0
 80037f0:	4c000000 	.word	0x4c000000
 80037f4:	7149f2ca 	.word	0x7149f2ca
 80037f8:	f149f2ca 	.word	0xf149f2ca
 80037fc:	0da24260 	.word	0x0da24260
 8003800:	8da24260 	.word	0x8da24260
 8003804:	33000000 	.word	0x33000000

08003808 <floorf>:
 8003808:	ee10 3a10 	vmov	r3, s0
 800380c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003810:	3a7f      	subs	r2, #127	@ 0x7f
 8003812:	2a16      	cmp	r2, #22
 8003814:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003818:	dc2b      	bgt.n	8003872 <floorf+0x6a>
 800381a:	2a00      	cmp	r2, #0
 800381c:	da12      	bge.n	8003844 <floorf+0x3c>
 800381e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003884 <floorf+0x7c>
 8003822:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003826:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382e:	dd06      	ble.n	800383e <floorf+0x36>
 8003830:	2b00      	cmp	r3, #0
 8003832:	da24      	bge.n	800387e <floorf+0x76>
 8003834:	2900      	cmp	r1, #0
 8003836:	4b14      	ldr	r3, [pc, #80]	@ (8003888 <floorf+0x80>)
 8003838:	bf08      	it	eq
 800383a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800383e:	ee00 3a10 	vmov	s0, r3
 8003842:	4770      	bx	lr
 8003844:	4911      	ldr	r1, [pc, #68]	@ (800388c <floorf+0x84>)
 8003846:	4111      	asrs	r1, r2
 8003848:	420b      	tst	r3, r1
 800384a:	d0fa      	beq.n	8003842 <floorf+0x3a>
 800384c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8003884 <floorf+0x7c>
 8003850:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003854:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385c:	ddef      	ble.n	800383e <floorf+0x36>
 800385e:	2b00      	cmp	r3, #0
 8003860:	bfbe      	ittt	lt
 8003862:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8003866:	fa40 f202 	asrlt.w	r2, r0, r2
 800386a:	189b      	addlt	r3, r3, r2
 800386c:	ea23 0301 	bic.w	r3, r3, r1
 8003870:	e7e5      	b.n	800383e <floorf+0x36>
 8003872:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8003876:	d3e4      	bcc.n	8003842 <floorf+0x3a>
 8003878:	ee30 0a00 	vadd.f32	s0, s0, s0
 800387c:	4770      	bx	lr
 800387e:	2300      	movs	r3, #0
 8003880:	e7dd      	b.n	800383e <floorf+0x36>
 8003882:	bf00      	nop
 8003884:	7149f2ca 	.word	0x7149f2ca
 8003888:	bf800000 	.word	0xbf800000
 800388c:	007fffff 	.word	0x007fffff

08003890 <_init>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr

0800389c <_fini>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	bf00      	nop
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr
